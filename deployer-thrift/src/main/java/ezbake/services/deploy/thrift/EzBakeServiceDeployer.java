/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.deploy.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EzBakeServiceDeployer {

  public interface Iface extends ezbake.base.thrift.EzBakeBaseService.Iface {

    /**
     * Deploy a service by appId to the EzBake platform
     * A unique version based on the timestamp will be used for this deployment of the application
     * The SSL private client keys will be added to the config directory for this application automatically upon
     * successful call to this RPC.
     * 
     * @param metaData - The application metadata to be deployed
     * @param artifact - a 'tar.gz' file of the application to be deployed.
     *                  The tar file should be in the following format:
     *                  +- app
     *                  |  +- application.jar
     *                  +- config
     *                  |  +- Any Application config files
     * @return - Metainformation about the application that has been deployed.
     * 
     * @param manifest
     * @param artifact
     * @param token
     */
    public DeploymentMetadata deployService(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException;

    /**
     * Undeploys an application using the applicationId/serviceId.  This will remove the application from the public view.
     * The application is still residing in the deployment database for auditing and restoring of an application that has
     * been undeployed.
     * 
     * @param applicationId
     * @param serviceId
     * @param token
     */
    public void undeploy(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException;

    /**
     * Get Latest deployed version of an application
     * 
     * @param - applicationId - Application id to get the latest version for
     * 
     * @return - The latest deployment information of application
     * 
     * @param applicationId
     * @param serviceId
     * @param token
     */
    public DeploymentMetadata getLatestApplicationVersion(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException;

    /**
     * Get the list of matching DeploymentMetadatas
     * 
     * @param - fieldName - The field to search - Leave empty to list everything
     * @param - fieldValue - The field value to search on  - Leave empty to list everything
     * 
     * @return - The list deployment information matching the query
     * 
     * @param fieldName
     * @param fieldValue
     * @param token
     */
    public List<DeploymentMetadata> listDeployed(String fieldName, String fieldValue, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException;

    /**
     * Get the current and all previous versions of an application's metadata
     * @param applicationId - Application id to get the versions for
     * 
     * @return - the list of all deployment metadata of the given application id
     * 
     * @param applicationId
     * @param serviceId
     * @param token
     */
    public List<DeploymentMetadata> getApplicationVersions(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException;

    /**
     * Sends the current version of the application ID to the PaaS (Mesos or OpenShift) as defined by the application metadata
     * 
     * @param - applicationId
     * 
     * @param applicationId
     * @param serviceId
     * @param token
     */
    public void publishArtifactLatestVersion(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException;

    /**
     * Sends the specified version of the application ID to the PaaS (Mesos or OpenShift) as defined by the application metadata
     * 
     * @param applicationId - Application id to publish
     * @param version - version of application to public
     * 
     * @param applicationId
     * @param serviceId
     * @param version
     * @param token
     */
    public void publishArtifact(String applicationId, String serviceId, String version, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException;

    /**
     * Deletes all artifact versions from the store
     * 
     * @param applicationId - Application id to remove
     * @param serviceId - the service that is being removed
     * 
     * @param applicationId
     * @param serviceId
     * @param token
     */
    public void deleteArtifact(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException;

    /**
     * Stages this artifact for deployment, but won't actually deploy it
     * 
     * @param manifest - Metadata for this artifact
     * @param artifact - the actual deployment package binary
     * 
     * @param manifest
     * @param artifact
     * @param token
     */
    public void stageServiceDeployment(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException;

    /**
     * Removes the artifact from the list of staged deployments
     * 
     * @param applicationId - Application id to remove
     * @param serviceId - the service that is being removed
     * 
     * @param applicationId
     * @param serviceId
     * @param token
     */
    public void unstageServiceDeployment(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException;

    /**
     * Update deployment metadata
     * 
     * @param metadata - deployment
     * 
     * @param metadata
     * @param token
     */
    public void updateDeploymentMetadata(DeploymentMetadata metadata, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.base.thrift.EzBakeBaseService .AsyncIface {

    public void deployService(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void undeploy(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLatestApplicationVersion(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listDeployed(String fieldName, String fieldValue, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplicationVersions(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void publishArtifactLatestVersion(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void publishArtifact(String applicationId, String serviceId, String version, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteArtifact(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void stageServiceDeployment(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unstageServiceDeployment(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateDeploymentMetadata(DeploymentMetadata metadata, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.base.thrift.EzBakeBaseService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public DeploymentMetadata deployService(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException
    {
      send_deployService(manifest, artifact, token);
      return recv_deployService();
    }

    public void send_deployService(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      deployService_args args = new deployService_args();
      args.setManifest(manifest);
      args.setArtifact(artifact);
      args.setToken(token);
      sendBase("deployService", args);
    }

    public DeploymentMetadata recv_deployService() throws DeploymentException, org.apache.thrift.TException
    {
      deployService_result result = new deployService_result();
      receiveBase(result, "deployService");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.problem != null) {
        throw result.problem;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deployService failed: unknown result");
    }

    public void undeploy(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException
    {
      send_undeploy(applicationId, serviceId, token);
      recv_undeploy();
    }

    public void send_undeploy(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      undeploy_args args = new undeploy_args();
      args.setApplicationId(applicationId);
      args.setServiceId(serviceId);
      args.setToken(token);
      sendBase("undeploy", args);
    }

    public void recv_undeploy() throws DeploymentException, org.apache.thrift.TException
    {
      undeploy_result result = new undeploy_result();
      receiveBase(result, "undeploy");
      if (result.problem != null) {
        throw result.problem;
      }
      return;
    }

    public DeploymentMetadata getLatestApplicationVersion(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException
    {
      send_getLatestApplicationVersion(applicationId, serviceId, token);
      return recv_getLatestApplicationVersion();
    }

    public void send_getLatestApplicationVersion(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getLatestApplicationVersion_args args = new getLatestApplicationVersion_args();
      args.setApplicationId(applicationId);
      args.setServiceId(serviceId);
      args.setToken(token);
      sendBase("getLatestApplicationVersion", args);
    }

    public DeploymentMetadata recv_getLatestApplicationVersion() throws DeploymentException, org.apache.thrift.TException
    {
      getLatestApplicationVersion_result result = new getLatestApplicationVersion_result();
      receiveBase(result, "getLatestApplicationVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.problem != null) {
        throw result.problem;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLatestApplicationVersion failed: unknown result");
    }

    public List<DeploymentMetadata> listDeployed(String fieldName, String fieldValue, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException
    {
      send_listDeployed(fieldName, fieldValue, token);
      return recv_listDeployed();
    }

    public void send_listDeployed(String fieldName, String fieldValue, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      listDeployed_args args = new listDeployed_args();
      args.setFieldName(fieldName);
      args.setFieldValue(fieldValue);
      args.setToken(token);
      sendBase("listDeployed", args);
    }

    public List<DeploymentMetadata> recv_listDeployed() throws DeploymentException, org.apache.thrift.TException
    {
      listDeployed_result result = new listDeployed_result();
      receiveBase(result, "listDeployed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.problem != null) {
        throw result.problem;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listDeployed failed: unknown result");
    }

    public List<DeploymentMetadata> getApplicationVersions(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException
    {
      send_getApplicationVersions(applicationId, serviceId, token);
      return recv_getApplicationVersions();
    }

    public void send_getApplicationVersions(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getApplicationVersions_args args = new getApplicationVersions_args();
      args.setApplicationId(applicationId);
      args.setServiceId(serviceId);
      args.setToken(token);
      sendBase("getApplicationVersions", args);
    }

    public List<DeploymentMetadata> recv_getApplicationVersions() throws DeploymentException, org.apache.thrift.TException
    {
      getApplicationVersions_result result = new getApplicationVersions_result();
      receiveBase(result, "getApplicationVersions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.problem != null) {
        throw result.problem;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplicationVersions failed: unknown result");
    }

    public void publishArtifactLatestVersion(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException
    {
      send_publishArtifactLatestVersion(applicationId, serviceId, token);
      recv_publishArtifactLatestVersion();
    }

    public void send_publishArtifactLatestVersion(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      publishArtifactLatestVersion_args args = new publishArtifactLatestVersion_args();
      args.setApplicationId(applicationId);
      args.setServiceId(serviceId);
      args.setToken(token);
      sendBase("publishArtifactLatestVersion", args);
    }

    public void recv_publishArtifactLatestVersion() throws DeploymentException, org.apache.thrift.TException
    {
      publishArtifactLatestVersion_result result = new publishArtifactLatestVersion_result();
      receiveBase(result, "publishArtifactLatestVersion");
      if (result.problem != null) {
        throw result.problem;
      }
      return;
    }

    public void publishArtifact(String applicationId, String serviceId, String version, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException
    {
      send_publishArtifact(applicationId, serviceId, version, token);
      recv_publishArtifact();
    }

    public void send_publishArtifact(String applicationId, String serviceId, String version, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      publishArtifact_args args = new publishArtifact_args();
      args.setApplicationId(applicationId);
      args.setServiceId(serviceId);
      args.setVersion(version);
      args.setToken(token);
      sendBase("publishArtifact", args);
    }

    public void recv_publishArtifact() throws DeploymentException, org.apache.thrift.TException
    {
      publishArtifact_result result = new publishArtifact_result();
      receiveBase(result, "publishArtifact");
      if (result.problem != null) {
        throw result.problem;
      }
      return;
    }

    public void deleteArtifact(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException
    {
      send_deleteArtifact(applicationId, serviceId, token);
      recv_deleteArtifact();
    }

    public void send_deleteArtifact(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      deleteArtifact_args args = new deleteArtifact_args();
      args.setApplicationId(applicationId);
      args.setServiceId(serviceId);
      args.setToken(token);
      sendBase("deleteArtifact", args);
    }

    public void recv_deleteArtifact() throws DeploymentException, org.apache.thrift.TException
    {
      deleteArtifact_result result = new deleteArtifact_result();
      receiveBase(result, "deleteArtifact");
      if (result.problem != null) {
        throw result.problem;
      }
      return;
    }

    public void stageServiceDeployment(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException
    {
      send_stageServiceDeployment(manifest, artifact, token);
      recv_stageServiceDeployment();
    }

    public void send_stageServiceDeployment(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      stageServiceDeployment_args args = new stageServiceDeployment_args();
      args.setManifest(manifest);
      args.setArtifact(artifact);
      args.setToken(token);
      sendBase("stageServiceDeployment", args);
    }

    public void recv_stageServiceDeployment() throws DeploymentException, org.apache.thrift.TException
    {
      stageServiceDeployment_result result = new stageServiceDeployment_result();
      receiveBase(result, "stageServiceDeployment");
      if (result.problem != null) {
        throw result.problem;
      }
      return;
    }

    public void unstageServiceDeployment(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException
    {
      send_unstageServiceDeployment(applicationId, serviceId, token);
      recv_unstageServiceDeployment();
    }

    public void send_unstageServiceDeployment(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      unstageServiceDeployment_args args = new unstageServiceDeployment_args();
      args.setApplicationId(applicationId);
      args.setServiceId(serviceId);
      args.setToken(token);
      sendBase("unstageServiceDeployment", args);
    }

    public void recv_unstageServiceDeployment() throws DeploymentException, org.apache.thrift.TException
    {
      unstageServiceDeployment_result result = new unstageServiceDeployment_result();
      receiveBase(result, "unstageServiceDeployment");
      if (result.problem != null) {
        throw result.problem;
      }
      return;
    }

    public void updateDeploymentMetadata(DeploymentMetadata metadata, ezbake.base.thrift.EzSecurityToken token) throws DeploymentException, org.apache.thrift.TException
    {
      send_updateDeploymentMetadata(metadata, token);
      recv_updateDeploymentMetadata();
    }

    public void send_updateDeploymentMetadata(DeploymentMetadata metadata, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      updateDeploymentMetadata_args args = new updateDeploymentMetadata_args();
      args.setMetadata(metadata);
      args.setToken(token);
      sendBase("updateDeploymentMetadata", args);
    }

    public void recv_updateDeploymentMetadata() throws DeploymentException, org.apache.thrift.TException
    {
      updateDeploymentMetadata_result result = new updateDeploymentMetadata_result();
      receiveBase(result, "updateDeploymentMetadata");
      if (result.problem != null) {
        throw result.problem;
      }
      return;
    }

  }
  public static class AsyncClient extends ezbake.base.thrift.EzBakeBaseService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void deployService(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deployService_call method_call = new deployService_call(manifest, artifact, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deployService_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ArtifactManifest manifest;
      private ByteBuffer artifact;
      private ezbake.base.thrift.EzSecurityToken token;
      public deployService_call(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.manifest = manifest;
        this.artifact = artifact;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deployService", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deployService_args args = new deployService_args();
        args.setManifest(manifest);
        args.setArtifact(artifact);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DeploymentMetadata getResult() throws DeploymentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deployService();
      }
    }

    public void undeploy(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      undeploy_call method_call = new undeploy_call(applicationId, serviceId, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class undeploy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private String serviceId;
      private ezbake.base.thrift.EzSecurityToken token;
      public undeploy_call(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.serviceId = serviceId;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("undeploy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        undeploy_args args = new undeploy_args();
        args.setApplicationId(applicationId);
        args.setServiceId(serviceId);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DeploymentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_undeploy();
      }
    }

    public void getLatestApplicationVersion(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLatestApplicationVersion_call method_call = new getLatestApplicationVersion_call(applicationId, serviceId, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLatestApplicationVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private String serviceId;
      private ezbake.base.thrift.EzSecurityToken token;
      public getLatestApplicationVersion_call(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.serviceId = serviceId;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestApplicationVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLatestApplicationVersion_args args = new getLatestApplicationVersion_args();
        args.setApplicationId(applicationId);
        args.setServiceId(serviceId);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DeploymentMetadata getResult() throws DeploymentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLatestApplicationVersion();
      }
    }

    public void listDeployed(String fieldName, String fieldValue, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listDeployed_call method_call = new listDeployed_call(fieldName, fieldValue, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listDeployed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fieldName;
      private String fieldValue;
      private ezbake.base.thrift.EzSecurityToken token;
      public listDeployed_call(String fieldName, String fieldValue, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fieldName = fieldName;
        this.fieldValue = fieldValue;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listDeployed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listDeployed_args args = new listDeployed_args();
        args.setFieldName(fieldName);
        args.setFieldValue(fieldValue);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DeploymentMetadata> getResult() throws DeploymentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listDeployed();
      }
    }

    public void getApplicationVersions(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplicationVersions_call method_call = new getApplicationVersions_call(applicationId, serviceId, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplicationVersions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private String serviceId;
      private ezbake.base.thrift.EzSecurityToken token;
      public getApplicationVersions_call(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.serviceId = serviceId;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplicationVersions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplicationVersions_args args = new getApplicationVersions_args();
        args.setApplicationId(applicationId);
        args.setServiceId(serviceId);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DeploymentMetadata> getResult() throws DeploymentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplicationVersions();
      }
    }

    public void publishArtifactLatestVersion(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publishArtifactLatestVersion_call method_call = new publishArtifactLatestVersion_call(applicationId, serviceId, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publishArtifactLatestVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private String serviceId;
      private ezbake.base.thrift.EzSecurityToken token;
      public publishArtifactLatestVersion_call(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.serviceId = serviceId;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publishArtifactLatestVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        publishArtifactLatestVersion_args args = new publishArtifactLatestVersion_args();
        args.setApplicationId(applicationId);
        args.setServiceId(serviceId);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DeploymentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_publishArtifactLatestVersion();
      }
    }

    public void publishArtifact(String applicationId, String serviceId, String version, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publishArtifact_call method_call = new publishArtifact_call(applicationId, serviceId, version, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publishArtifact_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private String serviceId;
      private String version;
      private ezbake.base.thrift.EzSecurityToken token;
      public publishArtifact_call(String applicationId, String serviceId, String version, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.serviceId = serviceId;
        this.version = version;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publishArtifact", org.apache.thrift.protocol.TMessageType.CALL, 0));
        publishArtifact_args args = new publishArtifact_args();
        args.setApplicationId(applicationId);
        args.setServiceId(serviceId);
        args.setVersion(version);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DeploymentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_publishArtifact();
      }
    }

    public void deleteArtifact(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteArtifact_call method_call = new deleteArtifact_call(applicationId, serviceId, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteArtifact_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private String serviceId;
      private ezbake.base.thrift.EzSecurityToken token;
      public deleteArtifact_call(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.serviceId = serviceId;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteArtifact", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteArtifact_args args = new deleteArtifact_args();
        args.setApplicationId(applicationId);
        args.setServiceId(serviceId);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DeploymentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteArtifact();
      }
    }

    public void stageServiceDeployment(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stageServiceDeployment_call method_call = new stageServiceDeployment_call(manifest, artifact, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stageServiceDeployment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ArtifactManifest manifest;
      private ByteBuffer artifact;
      private ezbake.base.thrift.EzSecurityToken token;
      public stageServiceDeployment_call(ArtifactManifest manifest, ByteBuffer artifact, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.manifest = manifest;
        this.artifact = artifact;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stageServiceDeployment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stageServiceDeployment_args args = new stageServiceDeployment_args();
        args.setManifest(manifest);
        args.setArtifact(artifact);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DeploymentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_stageServiceDeployment();
      }
    }

    public void unstageServiceDeployment(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unstageServiceDeployment_call method_call = new unstageServiceDeployment_call(applicationId, serviceId, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unstageServiceDeployment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applicationId;
      private String serviceId;
      private ezbake.base.thrift.EzSecurityToken token;
      public unstageServiceDeployment_call(String applicationId, String serviceId, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationId = applicationId;
        this.serviceId = serviceId;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unstageServiceDeployment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unstageServiceDeployment_args args = new unstageServiceDeployment_args();
        args.setApplicationId(applicationId);
        args.setServiceId(serviceId);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DeploymentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_unstageServiceDeployment();
      }
    }

    public void updateDeploymentMetadata(DeploymentMetadata metadata, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDeploymentMetadata_call method_call = new updateDeploymentMetadata_call(metadata, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDeploymentMetadata_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DeploymentMetadata metadata;
      private ezbake.base.thrift.EzSecurityToken token;
      public updateDeploymentMetadata_call(DeploymentMetadata metadata, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.metadata = metadata;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDeploymentMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDeploymentMetadata_args args = new updateDeploymentMetadata_args();
        args.setMetadata(metadata);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DeploymentException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateDeploymentMetadata();
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.base.thrift.EzBakeBaseService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("deployService", new deployService());
      processMap.put("undeploy", new undeploy());
      processMap.put("getLatestApplicationVersion", new getLatestApplicationVersion());
      processMap.put("listDeployed", new listDeployed());
      processMap.put("getApplicationVersions", new getApplicationVersions());
      processMap.put("publishArtifactLatestVersion", new publishArtifactLatestVersion());
      processMap.put("publishArtifact", new publishArtifact());
      processMap.put("deleteArtifact", new deleteArtifact());
      processMap.put("stageServiceDeployment", new stageServiceDeployment());
      processMap.put("unstageServiceDeployment", new unstageServiceDeployment());
      processMap.put("updateDeploymentMetadata", new updateDeploymentMetadata());
      return processMap;
    }

    public static class deployService<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deployService_args> {
      public deployService() {
        super("deployService");
      }

      public deployService_args getEmptyArgsInstance() {
        return new deployService_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deployService_result getResult(I iface, deployService_args args) throws org.apache.thrift.TException {
        deployService_result result = new deployService_result();
        try {
          result.success = iface.deployService(args.manifest, args.artifact, args.token);
        } catch (DeploymentException problem) {
          result.problem = problem;
        }
        return result;
      }
    }

    public static class undeploy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, undeploy_args> {
      public undeploy() {
        super("undeploy");
      }

      public undeploy_args getEmptyArgsInstance() {
        return new undeploy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public undeploy_result getResult(I iface, undeploy_args args) throws org.apache.thrift.TException {
        undeploy_result result = new undeploy_result();
        try {
          iface.undeploy(args.applicationId, args.serviceId, args.token);
        } catch (DeploymentException problem) {
          result.problem = problem;
        }
        return result;
      }
    }

    public static class getLatestApplicationVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLatestApplicationVersion_args> {
      public getLatestApplicationVersion() {
        super("getLatestApplicationVersion");
      }

      public getLatestApplicationVersion_args getEmptyArgsInstance() {
        return new getLatestApplicationVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLatestApplicationVersion_result getResult(I iface, getLatestApplicationVersion_args args) throws org.apache.thrift.TException {
        getLatestApplicationVersion_result result = new getLatestApplicationVersion_result();
        try {
          result.success = iface.getLatestApplicationVersion(args.applicationId, args.serviceId, args.token);
        } catch (DeploymentException problem) {
          result.problem = problem;
        }
        return result;
      }
    }

    public static class listDeployed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listDeployed_args> {
      public listDeployed() {
        super("listDeployed");
      }

      public listDeployed_args getEmptyArgsInstance() {
        return new listDeployed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listDeployed_result getResult(I iface, listDeployed_args args) throws org.apache.thrift.TException {
        listDeployed_result result = new listDeployed_result();
        try {
          result.success = iface.listDeployed(args.fieldName, args.fieldValue, args.token);
        } catch (DeploymentException problem) {
          result.problem = problem;
        }
        return result;
      }
    }

    public static class getApplicationVersions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplicationVersions_args> {
      public getApplicationVersions() {
        super("getApplicationVersions");
      }

      public getApplicationVersions_args getEmptyArgsInstance() {
        return new getApplicationVersions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplicationVersions_result getResult(I iface, getApplicationVersions_args args) throws org.apache.thrift.TException {
        getApplicationVersions_result result = new getApplicationVersions_result();
        try {
          result.success = iface.getApplicationVersions(args.applicationId, args.serviceId, args.token);
        } catch (DeploymentException problem) {
          result.problem = problem;
        }
        return result;
      }
    }

    public static class publishArtifactLatestVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishArtifactLatestVersion_args> {
      public publishArtifactLatestVersion() {
        super("publishArtifactLatestVersion");
      }

      public publishArtifactLatestVersion_args getEmptyArgsInstance() {
        return new publishArtifactLatestVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public publishArtifactLatestVersion_result getResult(I iface, publishArtifactLatestVersion_args args) throws org.apache.thrift.TException {
        publishArtifactLatestVersion_result result = new publishArtifactLatestVersion_result();
        try {
          iface.publishArtifactLatestVersion(args.applicationId, args.serviceId, args.token);
        } catch (DeploymentException problem) {
          result.problem = problem;
        }
        return result;
      }
    }

    public static class publishArtifact<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishArtifact_args> {
      public publishArtifact() {
        super("publishArtifact");
      }

      public publishArtifact_args getEmptyArgsInstance() {
        return new publishArtifact_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public publishArtifact_result getResult(I iface, publishArtifact_args args) throws org.apache.thrift.TException {
        publishArtifact_result result = new publishArtifact_result();
        try {
          iface.publishArtifact(args.applicationId, args.serviceId, args.version, args.token);
        } catch (DeploymentException problem) {
          result.problem = problem;
        }
        return result;
      }
    }

    public static class deleteArtifact<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteArtifact_args> {
      public deleteArtifact() {
        super("deleteArtifact");
      }

      public deleteArtifact_args getEmptyArgsInstance() {
        return new deleteArtifact_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteArtifact_result getResult(I iface, deleteArtifact_args args) throws org.apache.thrift.TException {
        deleteArtifact_result result = new deleteArtifact_result();
        try {
          iface.deleteArtifact(args.applicationId, args.serviceId, args.token);
        } catch (DeploymentException problem) {
          result.problem = problem;
        }
        return result;
      }
    }

    public static class stageServiceDeployment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stageServiceDeployment_args> {
      public stageServiceDeployment() {
        super("stageServiceDeployment");
      }

      public stageServiceDeployment_args getEmptyArgsInstance() {
        return new stageServiceDeployment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stageServiceDeployment_result getResult(I iface, stageServiceDeployment_args args) throws org.apache.thrift.TException {
        stageServiceDeployment_result result = new stageServiceDeployment_result();
        try {
          iface.stageServiceDeployment(args.manifest, args.artifact, args.token);
        } catch (DeploymentException problem) {
          result.problem = problem;
        }
        return result;
      }
    }

    public static class unstageServiceDeployment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unstageServiceDeployment_args> {
      public unstageServiceDeployment() {
        super("unstageServiceDeployment");
      }

      public unstageServiceDeployment_args getEmptyArgsInstance() {
        return new unstageServiceDeployment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unstageServiceDeployment_result getResult(I iface, unstageServiceDeployment_args args) throws org.apache.thrift.TException {
        unstageServiceDeployment_result result = new unstageServiceDeployment_result();
        try {
          iface.unstageServiceDeployment(args.applicationId, args.serviceId, args.token);
        } catch (DeploymentException problem) {
          result.problem = problem;
        }
        return result;
      }
    }

    public static class updateDeploymentMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDeploymentMetadata_args> {
      public updateDeploymentMetadata() {
        super("updateDeploymentMetadata");
      }

      public updateDeploymentMetadata_args getEmptyArgsInstance() {
        return new updateDeploymentMetadata_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateDeploymentMetadata_result getResult(I iface, updateDeploymentMetadata_args args) throws org.apache.thrift.TException {
        updateDeploymentMetadata_result result = new updateDeploymentMetadata_result();
        try {
          iface.updateDeploymentMetadata(args.metadata, args.token);
        } catch (DeploymentException problem) {
          result.problem = problem;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.base.thrift.EzBakeBaseService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("deployService", new deployService());
      processMap.put("undeploy", new undeploy());
      processMap.put("getLatestApplicationVersion", new getLatestApplicationVersion());
      processMap.put("listDeployed", new listDeployed());
      processMap.put("getApplicationVersions", new getApplicationVersions());
      processMap.put("publishArtifactLatestVersion", new publishArtifactLatestVersion());
      processMap.put("publishArtifact", new publishArtifact());
      processMap.put("deleteArtifact", new deleteArtifact());
      processMap.put("stageServiceDeployment", new stageServiceDeployment());
      processMap.put("unstageServiceDeployment", new unstageServiceDeployment());
      processMap.put("updateDeploymentMetadata", new updateDeploymentMetadata());
      return processMap;
    }

    public static class deployService<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deployService_args, DeploymentMetadata> {
      public deployService() {
        super("deployService");
      }

      public deployService_args getEmptyArgsInstance() {
        return new deployService_args();
      }

      public AsyncMethodCallback<DeploymentMetadata> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DeploymentMetadata>() { 
          public void onComplete(DeploymentMetadata o) {
            deployService_result result = new deployService_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deployService_result result = new deployService_result();
            if (e instanceof DeploymentException) {
                        result.problem = (DeploymentException) e;
                        result.setProblemIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deployService_args args, org.apache.thrift.async.AsyncMethodCallback<DeploymentMetadata> resultHandler) throws TException {
        iface.deployService(args.manifest, args.artifact, args.token,resultHandler);
      }
    }

    public static class undeploy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, undeploy_args, Void> {
      public undeploy() {
        super("undeploy");
      }

      public undeploy_args getEmptyArgsInstance() {
        return new undeploy_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            undeploy_result result = new undeploy_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            undeploy_result result = new undeploy_result();
            if (e instanceof DeploymentException) {
                        result.problem = (DeploymentException) e;
                        result.setProblemIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, undeploy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.undeploy(args.applicationId, args.serviceId, args.token,resultHandler);
      }
    }

    public static class getLatestApplicationVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLatestApplicationVersion_args, DeploymentMetadata> {
      public getLatestApplicationVersion() {
        super("getLatestApplicationVersion");
      }

      public getLatestApplicationVersion_args getEmptyArgsInstance() {
        return new getLatestApplicationVersion_args();
      }

      public AsyncMethodCallback<DeploymentMetadata> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DeploymentMetadata>() { 
          public void onComplete(DeploymentMetadata o) {
            getLatestApplicationVersion_result result = new getLatestApplicationVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLatestApplicationVersion_result result = new getLatestApplicationVersion_result();
            if (e instanceof DeploymentException) {
                        result.problem = (DeploymentException) e;
                        result.setProblemIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLatestApplicationVersion_args args, org.apache.thrift.async.AsyncMethodCallback<DeploymentMetadata> resultHandler) throws TException {
        iface.getLatestApplicationVersion(args.applicationId, args.serviceId, args.token,resultHandler);
      }
    }

    public static class listDeployed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listDeployed_args, List<DeploymentMetadata>> {
      public listDeployed() {
        super("listDeployed");
      }

      public listDeployed_args getEmptyArgsInstance() {
        return new listDeployed_args();
      }

      public AsyncMethodCallback<List<DeploymentMetadata>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<DeploymentMetadata>>() { 
          public void onComplete(List<DeploymentMetadata> o) {
            listDeployed_result result = new listDeployed_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listDeployed_result result = new listDeployed_result();
            if (e instanceof DeploymentException) {
                        result.problem = (DeploymentException) e;
                        result.setProblemIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listDeployed_args args, org.apache.thrift.async.AsyncMethodCallback<List<DeploymentMetadata>> resultHandler) throws TException {
        iface.listDeployed(args.fieldName, args.fieldValue, args.token,resultHandler);
      }
    }

    public static class getApplicationVersions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplicationVersions_args, List<DeploymentMetadata>> {
      public getApplicationVersions() {
        super("getApplicationVersions");
      }

      public getApplicationVersions_args getEmptyArgsInstance() {
        return new getApplicationVersions_args();
      }

      public AsyncMethodCallback<List<DeploymentMetadata>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<DeploymentMetadata>>() { 
          public void onComplete(List<DeploymentMetadata> o) {
            getApplicationVersions_result result = new getApplicationVersions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplicationVersions_result result = new getApplicationVersions_result();
            if (e instanceof DeploymentException) {
                        result.problem = (DeploymentException) e;
                        result.setProblemIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplicationVersions_args args, org.apache.thrift.async.AsyncMethodCallback<List<DeploymentMetadata>> resultHandler) throws TException {
        iface.getApplicationVersions(args.applicationId, args.serviceId, args.token,resultHandler);
      }
    }

    public static class publishArtifactLatestVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, publishArtifactLatestVersion_args, Void> {
      public publishArtifactLatestVersion() {
        super("publishArtifactLatestVersion");
      }

      public publishArtifactLatestVersion_args getEmptyArgsInstance() {
        return new publishArtifactLatestVersion_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            publishArtifactLatestVersion_result result = new publishArtifactLatestVersion_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            publishArtifactLatestVersion_result result = new publishArtifactLatestVersion_result();
            if (e instanceof DeploymentException) {
                        result.problem = (DeploymentException) e;
                        result.setProblemIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, publishArtifactLatestVersion_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.publishArtifactLatestVersion(args.applicationId, args.serviceId, args.token,resultHandler);
      }
    }

    public static class publishArtifact<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, publishArtifact_args, Void> {
      public publishArtifact() {
        super("publishArtifact");
      }

      public publishArtifact_args getEmptyArgsInstance() {
        return new publishArtifact_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            publishArtifact_result result = new publishArtifact_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            publishArtifact_result result = new publishArtifact_result();
            if (e instanceof DeploymentException) {
                        result.problem = (DeploymentException) e;
                        result.setProblemIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, publishArtifact_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.publishArtifact(args.applicationId, args.serviceId, args.version, args.token,resultHandler);
      }
    }

    public static class deleteArtifact<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteArtifact_args, Void> {
      public deleteArtifact() {
        super("deleteArtifact");
      }

      public deleteArtifact_args getEmptyArgsInstance() {
        return new deleteArtifact_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteArtifact_result result = new deleteArtifact_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteArtifact_result result = new deleteArtifact_result();
            if (e instanceof DeploymentException) {
                        result.problem = (DeploymentException) e;
                        result.setProblemIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteArtifact_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteArtifact(args.applicationId, args.serviceId, args.token,resultHandler);
      }
    }

    public static class stageServiceDeployment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stageServiceDeployment_args, Void> {
      public stageServiceDeployment() {
        super("stageServiceDeployment");
      }

      public stageServiceDeployment_args getEmptyArgsInstance() {
        return new stageServiceDeployment_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            stageServiceDeployment_result result = new stageServiceDeployment_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            stageServiceDeployment_result result = new stageServiceDeployment_result();
            if (e instanceof DeploymentException) {
                        result.problem = (DeploymentException) e;
                        result.setProblemIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stageServiceDeployment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.stageServiceDeployment(args.manifest, args.artifact, args.token,resultHandler);
      }
    }

    public static class unstageServiceDeployment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unstageServiceDeployment_args, Void> {
      public unstageServiceDeployment() {
        super("unstageServiceDeployment");
      }

      public unstageServiceDeployment_args getEmptyArgsInstance() {
        return new unstageServiceDeployment_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            unstageServiceDeployment_result result = new unstageServiceDeployment_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unstageServiceDeployment_result result = new unstageServiceDeployment_result();
            if (e instanceof DeploymentException) {
                        result.problem = (DeploymentException) e;
                        result.setProblemIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unstageServiceDeployment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.unstageServiceDeployment(args.applicationId, args.serviceId, args.token,resultHandler);
      }
    }

    public static class updateDeploymentMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateDeploymentMetadata_args, Void> {
      public updateDeploymentMetadata() {
        super("updateDeploymentMetadata");
      }

      public updateDeploymentMetadata_args getEmptyArgsInstance() {
        return new updateDeploymentMetadata_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateDeploymentMetadata_result result = new updateDeploymentMetadata_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateDeploymentMetadata_result result = new updateDeploymentMetadata_result();
            if (e instanceof DeploymentException) {
                        result.problem = (DeploymentException) e;
                        result.setProblemIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateDeploymentMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateDeploymentMetadata(args.metadata, args.token,resultHandler);
      }
    }

  }

  public static class deployService_args implements org.apache.thrift.TBase<deployService_args, deployService_args._Fields>, java.io.Serializable, Cloneable, Comparable<deployService_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deployService_args");

    private static final org.apache.thrift.protocol.TField MANIFEST_FIELD_DESC = new org.apache.thrift.protocol.TField("manifest", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARTIFACT_FIELD_DESC = new org.apache.thrift.protocol.TField("artifact", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deployService_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deployService_argsTupleSchemeFactory());
    }

    public ArtifactManifest manifest; // required
    public ByteBuffer artifact; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MANIFEST((short)1, "manifest"),
      ARTIFACT((short)2, "artifact"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MANIFEST
            return MANIFEST;
          case 2: // ARTIFACT
            return ARTIFACT;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MANIFEST, new org.apache.thrift.meta_data.FieldMetaData("manifest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ArtifactManifest.class)));
      tmpMap.put(_Fields.ARTIFACT, new org.apache.thrift.meta_data.FieldMetaData("artifact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deployService_args.class, metaDataMap);
    }

    public deployService_args() {
    }

    public deployService_args(
      ArtifactManifest manifest,
      ByteBuffer artifact,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.manifest = manifest;
      this.artifact = artifact;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deployService_args(deployService_args other) {
      if (other.isSetManifest()) {
        this.manifest = new ArtifactManifest(other.manifest);
      }
      if (other.isSetArtifact()) {
        this.artifact = org.apache.thrift.TBaseHelper.copyBinary(other.artifact);
;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public deployService_args deepCopy() {
      return new deployService_args(this);
    }

    @Override
    public void clear() {
      this.manifest = null;
      this.artifact = null;
      this.token = null;
    }

    public ArtifactManifest getManifest() {
      return this.manifest;
    }

    public deployService_args setManifest(ArtifactManifest manifest) {
      this.manifest = manifest;
      return this;
    }

    public void unsetManifest() {
      this.manifest = null;
    }

    /** Returns true if field manifest is set (has been assigned a value) and false otherwise */
    public boolean isSetManifest() {
      return this.manifest != null;
    }

    public void setManifestIsSet(boolean value) {
      if (!value) {
        this.manifest = null;
      }
    }

    public byte[] getArtifact() {
      setArtifact(org.apache.thrift.TBaseHelper.rightSize(artifact));
      return artifact == null ? null : artifact.array();
    }

    public ByteBuffer bufferForArtifact() {
      return artifact;
    }

    public deployService_args setArtifact(byte[] artifact) {
      setArtifact(artifact == null ? (ByteBuffer)null : ByteBuffer.wrap(artifact));
      return this;
    }

    public deployService_args setArtifact(ByteBuffer artifact) {
      this.artifact = artifact;
      return this;
    }

    public void unsetArtifact() {
      this.artifact = null;
    }

    /** Returns true if field artifact is set (has been assigned a value) and false otherwise */
    public boolean isSetArtifact() {
      return this.artifact != null;
    }

    public void setArtifactIsSet(boolean value) {
      if (!value) {
        this.artifact = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public deployService_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MANIFEST:
        if (value == null) {
          unsetManifest();
        } else {
          setManifest((ArtifactManifest)value);
        }
        break;

      case ARTIFACT:
        if (value == null) {
          unsetArtifact();
        } else {
          setArtifact((ByteBuffer)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MANIFEST:
        return getManifest();

      case ARTIFACT:
        return getArtifact();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MANIFEST:
        return isSetManifest();
      case ARTIFACT:
        return isSetArtifact();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deployService_args)
        return this.equals((deployService_args)that);
      return false;
    }

    public boolean equals(deployService_args that) {
      if (that == null)
        return false;

      boolean this_present_manifest = true && this.isSetManifest();
      boolean that_present_manifest = true && that.isSetManifest();
      if (this_present_manifest || that_present_manifest) {
        if (!(this_present_manifest && that_present_manifest))
          return false;
        if (!this.manifest.equals(that.manifest))
          return false;
      }

      boolean this_present_artifact = true && this.isSetArtifact();
      boolean that_present_artifact = true && that.isSetArtifact();
      if (this_present_artifact || that_present_artifact) {
        if (!(this_present_artifact && that_present_artifact))
          return false;
        if (!this.artifact.equals(that.artifact))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deployService_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetManifest()).compareTo(other.isSetManifest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetManifest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manifest, other.manifest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArtifact()).compareTo(other.isSetArtifact());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArtifact()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artifact, other.artifact);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deployService_args(");
      boolean first = true;

      sb.append("manifest:");
      if (this.manifest == null) {
        sb.append("null");
      } else {
        sb.append(this.manifest);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("artifact:");
      if (this.artifact == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.artifact, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (manifest != null) {
        manifest.validate();
      }
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deployService_argsStandardSchemeFactory implements SchemeFactory {
      public deployService_argsStandardScheme getScheme() {
        return new deployService_argsStandardScheme();
      }
    }

    private static class deployService_argsStandardScheme extends StandardScheme<deployService_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deployService_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MANIFEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.manifest = new ArtifactManifest();
                struct.manifest.read(iprot);
                struct.setManifestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARTIFACT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.artifact = iprot.readBinary();
                struct.setArtifactIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deployService_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.manifest != null) {
          oprot.writeFieldBegin(MANIFEST_FIELD_DESC);
          struct.manifest.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.artifact != null) {
          oprot.writeFieldBegin(ARTIFACT_FIELD_DESC);
          oprot.writeBinary(struct.artifact);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deployService_argsTupleSchemeFactory implements SchemeFactory {
      public deployService_argsTupleScheme getScheme() {
        return new deployService_argsTupleScheme();
      }
    }

    private static class deployService_argsTupleScheme extends TupleScheme<deployService_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deployService_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetManifest()) {
          optionals.set(0);
        }
        if (struct.isSetArtifact()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetManifest()) {
          struct.manifest.write(oprot);
        }
        if (struct.isSetArtifact()) {
          oprot.writeBinary(struct.artifact);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deployService_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.manifest = new ArtifactManifest();
          struct.manifest.read(iprot);
          struct.setManifestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.artifact = iprot.readBinary();
          struct.setArtifactIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class deployService_result implements org.apache.thrift.TBase<deployService_result, deployService_result._Fields>, java.io.Serializable, Cloneable, Comparable<deployService_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deployService_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deployService_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deployService_resultTupleSchemeFactory());
    }

    public DeploymentMetadata success; // required
    public DeploymentException problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PROBLEM((short)1, "problem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeploymentMetadata.class)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deployService_result.class, metaDataMap);
    }

    public deployService_result() {
    }

    public deployService_result(
      DeploymentMetadata success,
      DeploymentException problem)
    {
      this();
      this.success = success;
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deployService_result(deployService_result other) {
      if (other.isSetSuccess()) {
        this.success = new DeploymentMetadata(other.success);
      }
      if (other.isSetProblem()) {
        this.problem = new DeploymentException(other.problem);
      }
    }

    public deployService_result deepCopy() {
      return new deployService_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.problem = null;
    }

    public DeploymentMetadata getSuccess() {
      return this.success;
    }

    public deployService_result setSuccess(DeploymentMetadata success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DeploymentException getProblem() {
      return this.problem;
    }

    public deployService_result setProblem(DeploymentException problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DeploymentMetadata)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((DeploymentException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deployService_result)
        return this.equals((deployService_result)that);
      return false;
    }

    public boolean equals(deployService_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deployService_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deployService_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deployService_resultStandardSchemeFactory implements SchemeFactory {
      public deployService_resultStandardScheme getScheme() {
        return new deployService_resultStandardScheme();
      }
    }

    private static class deployService_resultStandardScheme extends StandardScheme<deployService_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deployService_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DeploymentMetadata();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.problem = new DeploymentException();
                struct.problem.read(iprot);
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deployService_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          struct.problem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deployService_resultTupleSchemeFactory implements SchemeFactory {
      public deployService_resultTupleScheme getScheme() {
        return new deployService_resultTupleScheme();
      }
    }

    private static class deployService_resultTupleScheme extends TupleScheme<deployService_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deployService_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetProblem()) {
          struct.problem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deployService_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DeploymentMetadata();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = new DeploymentException();
          struct.problem.read(iprot);
          struct.setProblemIsSet(true);
        }
      }
    }

  }

  public static class undeploy_args implements org.apache.thrift.TBase<undeploy_args, undeploy_args._Fields>, java.io.Serializable, Cloneable, Comparable<undeploy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("undeploy_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new undeploy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new undeploy_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public String serviceId; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      SERVICE_ID((short)2, "serviceId"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // SERVICE_ID
            return SERVICE_ID;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(undeploy_args.class, metaDataMap);
    }

    public undeploy_args() {
    }

    public undeploy_args(
      String applicationId,
      String serviceId,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.applicationId = applicationId;
      this.serviceId = serviceId;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public undeploy_args(undeploy_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      if (other.isSetServiceId()) {
        this.serviceId = other.serviceId;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public undeploy_args deepCopy() {
      return new undeploy_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      this.serviceId = null;
      this.token = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public undeploy_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public String getServiceId() {
      return this.serviceId;
    }

    public undeploy_args setServiceId(String serviceId) {
      this.serviceId = serviceId;
      return this;
    }

    public void unsetServiceId() {
      this.serviceId = null;
    }

    /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceId() {
      return this.serviceId != null;
    }

    public void setServiceIdIsSet(boolean value) {
      if (!value) {
        this.serviceId = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public undeploy_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case SERVICE_ID:
        if (value == null) {
          unsetServiceId();
        } else {
          setServiceId((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case SERVICE_ID:
        return getServiceId();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case SERVICE_ID:
        return isSetServiceId();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof undeploy_args)
        return this.equals((undeploy_args)that);
      return false;
    }

    public boolean equals(undeploy_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_serviceId = true && this.isSetServiceId();
      boolean that_present_serviceId = true && that.isSetServiceId();
      if (this_present_serviceId || that_present_serviceId) {
        if (!(this_present_serviceId && that_present_serviceId))
          return false;
        if (!this.serviceId.equals(that.serviceId))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(undeploy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("undeploy_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceId:");
      if (this.serviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class undeploy_argsStandardSchemeFactory implements SchemeFactory {
      public undeploy_argsStandardScheme getScheme() {
        return new undeploy_argsStandardScheme();
      }
    }

    private static class undeploy_argsStandardScheme extends StandardScheme<undeploy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, undeploy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceId = iprot.readString();
                struct.setServiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, undeploy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        if (struct.serviceId != null) {
          oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
          oprot.writeString(struct.serviceId);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class undeploy_argsTupleSchemeFactory implements SchemeFactory {
      public undeploy_argsTupleScheme getScheme() {
        return new undeploy_argsTupleScheme();
      }
    }

    private static class undeploy_argsTupleScheme extends TupleScheme<undeploy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, undeploy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetServiceId()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetServiceId()) {
          oprot.writeString(struct.serviceId);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, undeploy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceId = iprot.readString();
          struct.setServiceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class undeploy_result implements org.apache.thrift.TBase<undeploy_result, undeploy_result._Fields>, java.io.Serializable, Cloneable, Comparable<undeploy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("undeploy_result");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new undeploy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new undeploy_resultTupleSchemeFactory());
    }

    public DeploymentException problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(undeploy_result.class, metaDataMap);
    }

    public undeploy_result() {
    }

    public undeploy_result(
      DeploymentException problem)
    {
      this();
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public undeploy_result(undeploy_result other) {
      if (other.isSetProblem()) {
        this.problem = new DeploymentException(other.problem);
      }
    }

    public undeploy_result deepCopy() {
      return new undeploy_result(this);
    }

    @Override
    public void clear() {
      this.problem = null;
    }

    public DeploymentException getProblem() {
      return this.problem;
    }

    public undeploy_result setProblem(DeploymentException problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((DeploymentException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof undeploy_result)
        return this.equals((undeploy_result)that);
      return false;
    }

    public boolean equals(undeploy_result that) {
      if (that == null)
        return false;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(undeploy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("undeploy_result(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class undeploy_resultStandardSchemeFactory implements SchemeFactory {
      public undeploy_resultStandardScheme getScheme() {
        return new undeploy_resultStandardScheme();
      }
    }

    private static class undeploy_resultStandardScheme extends StandardScheme<undeploy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, undeploy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.problem = new DeploymentException();
                struct.problem.read(iprot);
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, undeploy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          struct.problem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class undeploy_resultTupleSchemeFactory implements SchemeFactory {
      public undeploy_resultTupleScheme getScheme() {
        return new undeploy_resultTupleScheme();
      }
    }

    private static class undeploy_resultTupleScheme extends TupleScheme<undeploy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, undeploy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProblem()) {
          struct.problem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, undeploy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.problem = new DeploymentException();
          struct.problem.read(iprot);
          struct.setProblemIsSet(true);
        }
      }
    }

  }

  public static class getLatestApplicationVersion_args implements org.apache.thrift.TBase<getLatestApplicationVersion_args, getLatestApplicationVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestApplicationVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestApplicationVersion_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestApplicationVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestApplicationVersion_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public String serviceId; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      SERVICE_ID((short)2, "serviceId"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // SERVICE_ID
            return SERVICE_ID;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestApplicationVersion_args.class, metaDataMap);
    }

    public getLatestApplicationVersion_args() {
    }

    public getLatestApplicationVersion_args(
      String applicationId,
      String serviceId,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.applicationId = applicationId;
      this.serviceId = serviceId;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestApplicationVersion_args(getLatestApplicationVersion_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      if (other.isSetServiceId()) {
        this.serviceId = other.serviceId;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getLatestApplicationVersion_args deepCopy() {
      return new getLatestApplicationVersion_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      this.serviceId = null;
      this.token = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getLatestApplicationVersion_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public String getServiceId() {
      return this.serviceId;
    }

    public getLatestApplicationVersion_args setServiceId(String serviceId) {
      this.serviceId = serviceId;
      return this;
    }

    public void unsetServiceId() {
      this.serviceId = null;
    }

    /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceId() {
      return this.serviceId != null;
    }

    public void setServiceIdIsSet(boolean value) {
      if (!value) {
        this.serviceId = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getLatestApplicationVersion_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case SERVICE_ID:
        if (value == null) {
          unsetServiceId();
        } else {
          setServiceId((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case SERVICE_ID:
        return getServiceId();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case SERVICE_ID:
        return isSetServiceId();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestApplicationVersion_args)
        return this.equals((getLatestApplicationVersion_args)that);
      return false;
    }

    public boolean equals(getLatestApplicationVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_serviceId = true && this.isSetServiceId();
      boolean that_present_serviceId = true && that.isSetServiceId();
      if (this_present_serviceId || that_present_serviceId) {
        if (!(this_present_serviceId && that_present_serviceId))
          return false;
        if (!this.serviceId.equals(that.serviceId))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestApplicationVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestApplicationVersion_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceId:");
      if (this.serviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestApplicationVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getLatestApplicationVersion_argsStandardScheme getScheme() {
        return new getLatestApplicationVersion_argsStandardScheme();
      }
    }

    private static class getLatestApplicationVersion_argsStandardScheme extends StandardScheme<getLatestApplicationVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestApplicationVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceId = iprot.readString();
                struct.setServiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestApplicationVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        if (struct.serviceId != null) {
          oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
          oprot.writeString(struct.serviceId);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestApplicationVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getLatestApplicationVersion_argsTupleScheme getScheme() {
        return new getLatestApplicationVersion_argsTupleScheme();
      }
    }

    private static class getLatestApplicationVersion_argsTupleScheme extends TupleScheme<getLatestApplicationVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestApplicationVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetServiceId()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetServiceId()) {
          oprot.writeString(struct.serviceId);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestApplicationVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceId = iprot.readString();
          struct.setServiceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getLatestApplicationVersion_result implements org.apache.thrift.TBase<getLatestApplicationVersion_result, getLatestApplicationVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestApplicationVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestApplicationVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestApplicationVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestApplicationVersion_resultTupleSchemeFactory());
    }

    public DeploymentMetadata success; // required
    public DeploymentException problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PROBLEM((short)1, "problem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeploymentMetadata.class)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestApplicationVersion_result.class, metaDataMap);
    }

    public getLatestApplicationVersion_result() {
    }

    public getLatestApplicationVersion_result(
      DeploymentMetadata success,
      DeploymentException problem)
    {
      this();
      this.success = success;
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestApplicationVersion_result(getLatestApplicationVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = new DeploymentMetadata(other.success);
      }
      if (other.isSetProblem()) {
        this.problem = new DeploymentException(other.problem);
      }
    }

    public getLatestApplicationVersion_result deepCopy() {
      return new getLatestApplicationVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.problem = null;
    }

    public DeploymentMetadata getSuccess() {
      return this.success;
    }

    public getLatestApplicationVersion_result setSuccess(DeploymentMetadata success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DeploymentException getProblem() {
      return this.problem;
    }

    public getLatestApplicationVersion_result setProblem(DeploymentException problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DeploymentMetadata)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((DeploymentException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestApplicationVersion_result)
        return this.equals((getLatestApplicationVersion_result)that);
      return false;
    }

    public boolean equals(getLatestApplicationVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestApplicationVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestApplicationVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestApplicationVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getLatestApplicationVersion_resultStandardScheme getScheme() {
        return new getLatestApplicationVersion_resultStandardScheme();
      }
    }

    private static class getLatestApplicationVersion_resultStandardScheme extends StandardScheme<getLatestApplicationVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestApplicationVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DeploymentMetadata();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.problem = new DeploymentException();
                struct.problem.read(iprot);
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestApplicationVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          struct.problem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestApplicationVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getLatestApplicationVersion_resultTupleScheme getScheme() {
        return new getLatestApplicationVersion_resultTupleScheme();
      }
    }

    private static class getLatestApplicationVersion_resultTupleScheme extends TupleScheme<getLatestApplicationVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestApplicationVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetProblem()) {
          struct.problem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestApplicationVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DeploymentMetadata();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = new DeploymentException();
          struct.problem.read(iprot);
          struct.setProblemIsSet(true);
        }
      }
    }

  }

  public static class listDeployed_args implements org.apache.thrift.TBase<listDeployed_args, listDeployed_args._Fields>, java.io.Serializable, Cloneable, Comparable<listDeployed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDeployed_args");

    private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FIELD_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldValue", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDeployed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDeployed_argsTupleSchemeFactory());
    }

    public String fieldName; // required
    public String fieldValue; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIELD_NAME((short)1, "fieldName"),
      FIELD_VALUE((short)2, "fieldValue"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIELD_NAME
            return FIELD_NAME;
          case 2: // FIELD_VALUE
            return FIELD_VALUE;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("fieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FIELD_VALUE, new org.apache.thrift.meta_data.FieldMetaData("fieldValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDeployed_args.class, metaDataMap);
    }

    public listDeployed_args() {
    }

    public listDeployed_args(
      String fieldName,
      String fieldValue,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.fieldName = fieldName;
      this.fieldValue = fieldValue;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDeployed_args(listDeployed_args other) {
      if (other.isSetFieldName()) {
        this.fieldName = other.fieldName;
      }
      if (other.isSetFieldValue()) {
        this.fieldValue = other.fieldValue;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public listDeployed_args deepCopy() {
      return new listDeployed_args(this);
    }

    @Override
    public void clear() {
      this.fieldName = null;
      this.fieldValue = null;
      this.token = null;
    }

    public String getFieldName() {
      return this.fieldName;
    }

    public listDeployed_args setFieldName(String fieldName) {
      this.fieldName = fieldName;
      return this;
    }

    public void unsetFieldName() {
      this.fieldName = null;
    }

    /** Returns true if field fieldName is set (has been assigned a value) and false otherwise */
    public boolean isSetFieldName() {
      return this.fieldName != null;
    }

    public void setFieldNameIsSet(boolean value) {
      if (!value) {
        this.fieldName = null;
      }
    }

    public String getFieldValue() {
      return this.fieldValue;
    }

    public listDeployed_args setFieldValue(String fieldValue) {
      this.fieldValue = fieldValue;
      return this;
    }

    public void unsetFieldValue() {
      this.fieldValue = null;
    }

    /** Returns true if field fieldValue is set (has been assigned a value) and false otherwise */
    public boolean isSetFieldValue() {
      return this.fieldValue != null;
    }

    public void setFieldValueIsSet(boolean value) {
      if (!value) {
        this.fieldValue = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public listDeployed_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIELD_NAME:
        if (value == null) {
          unsetFieldName();
        } else {
          setFieldName((String)value);
        }
        break;

      case FIELD_VALUE:
        if (value == null) {
          unsetFieldValue();
        } else {
          setFieldValue((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIELD_NAME:
        return getFieldName();

      case FIELD_VALUE:
        return getFieldValue();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIELD_NAME:
        return isSetFieldName();
      case FIELD_VALUE:
        return isSetFieldValue();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDeployed_args)
        return this.equals((listDeployed_args)that);
      return false;
    }

    public boolean equals(listDeployed_args that) {
      if (that == null)
        return false;

      boolean this_present_fieldName = true && this.isSetFieldName();
      boolean that_present_fieldName = true && that.isSetFieldName();
      if (this_present_fieldName || that_present_fieldName) {
        if (!(this_present_fieldName && that_present_fieldName))
          return false;
        if (!this.fieldName.equals(that.fieldName))
          return false;
      }

      boolean this_present_fieldValue = true && this.isSetFieldValue();
      boolean that_present_fieldValue = true && that.isSetFieldValue();
      if (this_present_fieldValue || that_present_fieldValue) {
        if (!(this_present_fieldValue && that_present_fieldValue))
          return false;
        if (!this.fieldValue.equals(that.fieldValue))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listDeployed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFieldName()).compareTo(other.isSetFieldName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFieldName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldName, other.fieldName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFieldValue()).compareTo(other.isSetFieldValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFieldValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldValue, other.fieldValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDeployed_args(");
      boolean first = true;

      sb.append("fieldName:");
      if (this.fieldName == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fieldValue:");
      if (this.fieldValue == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldValue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDeployed_argsStandardSchemeFactory implements SchemeFactory {
      public listDeployed_argsStandardScheme getScheme() {
        return new listDeployed_argsStandardScheme();
      }
    }

    private static class listDeployed_argsStandardScheme extends StandardScheme<listDeployed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDeployed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIELD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fieldName = iprot.readString();
                struct.setFieldNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FIELD_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fieldValue = iprot.readString();
                struct.setFieldValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDeployed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fieldName != null) {
          oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
          oprot.writeString(struct.fieldName);
          oprot.writeFieldEnd();
        }
        if (struct.fieldValue != null) {
          oprot.writeFieldBegin(FIELD_VALUE_FIELD_DESC);
          oprot.writeString(struct.fieldValue);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDeployed_argsTupleSchemeFactory implements SchemeFactory {
      public listDeployed_argsTupleScheme getScheme() {
        return new listDeployed_argsTupleScheme();
      }
    }

    private static class listDeployed_argsTupleScheme extends TupleScheme<listDeployed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDeployed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFieldName()) {
          optionals.set(0);
        }
        if (struct.isSetFieldValue()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFieldName()) {
          oprot.writeString(struct.fieldName);
        }
        if (struct.isSetFieldValue()) {
          oprot.writeString(struct.fieldValue);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDeployed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fieldName = iprot.readString();
          struct.setFieldNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fieldValue = iprot.readString();
          struct.setFieldValueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class listDeployed_result implements org.apache.thrift.TBase<listDeployed_result, listDeployed_result._Fields>, java.io.Serializable, Cloneable, Comparable<listDeployed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDeployed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDeployed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDeployed_resultTupleSchemeFactory());
    }

    public List<DeploymentMetadata> success; // required
    public DeploymentException problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PROBLEM((short)1, "problem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeploymentMetadata.class))));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDeployed_result.class, metaDataMap);
    }

    public listDeployed_result() {
    }

    public listDeployed_result(
      List<DeploymentMetadata> success,
      DeploymentException problem)
    {
      this();
      this.success = success;
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDeployed_result(listDeployed_result other) {
      if (other.isSetSuccess()) {
        List<DeploymentMetadata> __this__success = new ArrayList<DeploymentMetadata>(other.success.size());
        for (DeploymentMetadata other_element : other.success) {
          __this__success.add(new DeploymentMetadata(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetProblem()) {
        this.problem = new DeploymentException(other.problem);
      }
    }

    public listDeployed_result deepCopy() {
      return new listDeployed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.problem = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DeploymentMetadata> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DeploymentMetadata elem) {
      if (this.success == null) {
        this.success = new ArrayList<DeploymentMetadata>();
      }
      this.success.add(elem);
    }

    public List<DeploymentMetadata> getSuccess() {
      return this.success;
    }

    public listDeployed_result setSuccess(List<DeploymentMetadata> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DeploymentException getProblem() {
      return this.problem;
    }

    public listDeployed_result setProblem(DeploymentException problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DeploymentMetadata>)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((DeploymentException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDeployed_result)
        return this.equals((listDeployed_result)that);
      return false;
    }

    public boolean equals(listDeployed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listDeployed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDeployed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDeployed_resultStandardSchemeFactory implements SchemeFactory {
      public listDeployed_resultStandardScheme getScheme() {
        return new listDeployed_resultStandardScheme();
      }
    }

    private static class listDeployed_resultStandardScheme extends StandardScheme<listDeployed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDeployed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<DeploymentMetadata>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    DeploymentMetadata _elem26;
                    _elem26 = new DeploymentMetadata();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.problem = new DeploymentException();
                struct.problem.read(iprot);
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDeployed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DeploymentMetadata _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          struct.problem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDeployed_resultTupleSchemeFactory implements SchemeFactory {
      public listDeployed_resultTupleScheme getScheme() {
        return new listDeployed_resultTupleScheme();
      }
    }

    private static class listDeployed_resultTupleScheme extends TupleScheme<listDeployed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDeployed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DeploymentMetadata _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetProblem()) {
          struct.problem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDeployed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DeploymentMetadata>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              DeploymentMetadata _elem31;
              _elem31 = new DeploymentMetadata();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = new DeploymentException();
          struct.problem.read(iprot);
          struct.setProblemIsSet(true);
        }
      }
    }

  }

  public static class getApplicationVersions_args implements org.apache.thrift.TBase<getApplicationVersions_args, getApplicationVersions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationVersions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationVersions_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationVersions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationVersions_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public String serviceId; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      SERVICE_ID((short)2, "serviceId"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // SERVICE_ID
            return SERVICE_ID;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationVersions_args.class, metaDataMap);
    }

    public getApplicationVersions_args() {
    }

    public getApplicationVersions_args(
      String applicationId,
      String serviceId,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.applicationId = applicationId;
      this.serviceId = serviceId;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationVersions_args(getApplicationVersions_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      if (other.isSetServiceId()) {
        this.serviceId = other.serviceId;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getApplicationVersions_args deepCopy() {
      return new getApplicationVersions_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      this.serviceId = null;
      this.token = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public getApplicationVersions_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public String getServiceId() {
      return this.serviceId;
    }

    public getApplicationVersions_args setServiceId(String serviceId) {
      this.serviceId = serviceId;
      return this;
    }

    public void unsetServiceId() {
      this.serviceId = null;
    }

    /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceId() {
      return this.serviceId != null;
    }

    public void setServiceIdIsSet(boolean value) {
      if (!value) {
        this.serviceId = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getApplicationVersions_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case SERVICE_ID:
        if (value == null) {
          unsetServiceId();
        } else {
          setServiceId((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case SERVICE_ID:
        return getServiceId();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case SERVICE_ID:
        return isSetServiceId();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationVersions_args)
        return this.equals((getApplicationVersions_args)that);
      return false;
    }

    public boolean equals(getApplicationVersions_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_serviceId = true && this.isSetServiceId();
      boolean that_present_serviceId = true && that.isSetServiceId();
      if (this_present_serviceId || that_present_serviceId) {
        if (!(this_present_serviceId && that_present_serviceId))
          return false;
        if (!this.serviceId.equals(that.serviceId))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationVersions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationVersions_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceId:");
      if (this.serviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationVersions_argsStandardSchemeFactory implements SchemeFactory {
      public getApplicationVersions_argsStandardScheme getScheme() {
        return new getApplicationVersions_argsStandardScheme();
      }
    }

    private static class getApplicationVersions_argsStandardScheme extends StandardScheme<getApplicationVersions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationVersions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceId = iprot.readString();
                struct.setServiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationVersions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        if (struct.serviceId != null) {
          oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
          oprot.writeString(struct.serviceId);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationVersions_argsTupleSchemeFactory implements SchemeFactory {
      public getApplicationVersions_argsTupleScheme getScheme() {
        return new getApplicationVersions_argsTupleScheme();
      }
    }

    private static class getApplicationVersions_argsTupleScheme extends TupleScheme<getApplicationVersions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationVersions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetServiceId()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetServiceId()) {
          oprot.writeString(struct.serviceId);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationVersions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceId = iprot.readString();
          struct.setServiceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getApplicationVersions_result implements org.apache.thrift.TBase<getApplicationVersions_result, getApplicationVersions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplicationVersions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplicationVersions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplicationVersions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplicationVersions_resultTupleSchemeFactory());
    }

    public List<DeploymentMetadata> success; // required
    public DeploymentException problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PROBLEM((short)1, "problem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeploymentMetadata.class))));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplicationVersions_result.class, metaDataMap);
    }

    public getApplicationVersions_result() {
    }

    public getApplicationVersions_result(
      List<DeploymentMetadata> success,
      DeploymentException problem)
    {
      this();
      this.success = success;
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplicationVersions_result(getApplicationVersions_result other) {
      if (other.isSetSuccess()) {
        List<DeploymentMetadata> __this__success = new ArrayList<DeploymentMetadata>(other.success.size());
        for (DeploymentMetadata other_element : other.success) {
          __this__success.add(new DeploymentMetadata(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetProblem()) {
        this.problem = new DeploymentException(other.problem);
      }
    }

    public getApplicationVersions_result deepCopy() {
      return new getApplicationVersions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.problem = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DeploymentMetadata> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DeploymentMetadata elem) {
      if (this.success == null) {
        this.success = new ArrayList<DeploymentMetadata>();
      }
      this.success.add(elem);
    }

    public List<DeploymentMetadata> getSuccess() {
      return this.success;
    }

    public getApplicationVersions_result setSuccess(List<DeploymentMetadata> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DeploymentException getProblem() {
      return this.problem;
    }

    public getApplicationVersions_result setProblem(DeploymentException problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DeploymentMetadata>)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((DeploymentException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplicationVersions_result)
        return this.equals((getApplicationVersions_result)that);
      return false;
    }

    public boolean equals(getApplicationVersions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getApplicationVersions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplicationVersions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplicationVersions_resultStandardSchemeFactory implements SchemeFactory {
      public getApplicationVersions_resultStandardScheme getScheme() {
        return new getApplicationVersions_resultStandardScheme();
      }
    }

    private static class getApplicationVersions_resultStandardScheme extends StandardScheme<getApplicationVersions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplicationVersions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<DeploymentMetadata>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    DeploymentMetadata _elem34;
                    _elem34 = new DeploymentMetadata();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.problem = new DeploymentException();
                struct.problem.read(iprot);
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplicationVersions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DeploymentMetadata _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          struct.problem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplicationVersions_resultTupleSchemeFactory implements SchemeFactory {
      public getApplicationVersions_resultTupleScheme getScheme() {
        return new getApplicationVersions_resultTupleScheme();
      }
    }

    private static class getApplicationVersions_resultTupleScheme extends TupleScheme<getApplicationVersions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplicationVersions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DeploymentMetadata _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetProblem()) {
          struct.problem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplicationVersions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DeploymentMetadata>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              DeploymentMetadata _elem39;
              _elem39 = new DeploymentMetadata();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = new DeploymentException();
          struct.problem.read(iprot);
          struct.setProblemIsSet(true);
        }
      }
    }

  }

  public static class publishArtifactLatestVersion_args implements org.apache.thrift.TBase<publishArtifactLatestVersion_args, publishArtifactLatestVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<publishArtifactLatestVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishArtifactLatestVersion_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishArtifactLatestVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishArtifactLatestVersion_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public String serviceId; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      SERVICE_ID((short)2, "serviceId"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // SERVICE_ID
            return SERVICE_ID;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishArtifactLatestVersion_args.class, metaDataMap);
    }

    public publishArtifactLatestVersion_args() {
    }

    public publishArtifactLatestVersion_args(
      String applicationId,
      String serviceId,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.applicationId = applicationId;
      this.serviceId = serviceId;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishArtifactLatestVersion_args(publishArtifactLatestVersion_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      if (other.isSetServiceId()) {
        this.serviceId = other.serviceId;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public publishArtifactLatestVersion_args deepCopy() {
      return new publishArtifactLatestVersion_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      this.serviceId = null;
      this.token = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public publishArtifactLatestVersion_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public String getServiceId() {
      return this.serviceId;
    }

    public publishArtifactLatestVersion_args setServiceId(String serviceId) {
      this.serviceId = serviceId;
      return this;
    }

    public void unsetServiceId() {
      this.serviceId = null;
    }

    /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceId() {
      return this.serviceId != null;
    }

    public void setServiceIdIsSet(boolean value) {
      if (!value) {
        this.serviceId = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public publishArtifactLatestVersion_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case SERVICE_ID:
        if (value == null) {
          unsetServiceId();
        } else {
          setServiceId((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case SERVICE_ID:
        return getServiceId();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case SERVICE_ID:
        return isSetServiceId();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishArtifactLatestVersion_args)
        return this.equals((publishArtifactLatestVersion_args)that);
      return false;
    }

    public boolean equals(publishArtifactLatestVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_serviceId = true && this.isSetServiceId();
      boolean that_present_serviceId = true && that.isSetServiceId();
      if (this_present_serviceId || that_present_serviceId) {
        if (!(this_present_serviceId && that_present_serviceId))
          return false;
        if (!this.serviceId.equals(that.serviceId))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(publishArtifactLatestVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishArtifactLatestVersion_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceId:");
      if (this.serviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishArtifactLatestVersion_argsStandardSchemeFactory implements SchemeFactory {
      public publishArtifactLatestVersion_argsStandardScheme getScheme() {
        return new publishArtifactLatestVersion_argsStandardScheme();
      }
    }

    private static class publishArtifactLatestVersion_argsStandardScheme extends StandardScheme<publishArtifactLatestVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishArtifactLatestVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceId = iprot.readString();
                struct.setServiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishArtifactLatestVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        if (struct.serviceId != null) {
          oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
          oprot.writeString(struct.serviceId);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishArtifactLatestVersion_argsTupleSchemeFactory implements SchemeFactory {
      public publishArtifactLatestVersion_argsTupleScheme getScheme() {
        return new publishArtifactLatestVersion_argsTupleScheme();
      }
    }

    private static class publishArtifactLatestVersion_argsTupleScheme extends TupleScheme<publishArtifactLatestVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishArtifactLatestVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetServiceId()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetServiceId()) {
          oprot.writeString(struct.serviceId);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishArtifactLatestVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceId = iprot.readString();
          struct.setServiceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class publishArtifactLatestVersion_result implements org.apache.thrift.TBase<publishArtifactLatestVersion_result, publishArtifactLatestVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<publishArtifactLatestVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishArtifactLatestVersion_result");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishArtifactLatestVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishArtifactLatestVersion_resultTupleSchemeFactory());
    }

    public DeploymentException problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishArtifactLatestVersion_result.class, metaDataMap);
    }

    public publishArtifactLatestVersion_result() {
    }

    public publishArtifactLatestVersion_result(
      DeploymentException problem)
    {
      this();
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishArtifactLatestVersion_result(publishArtifactLatestVersion_result other) {
      if (other.isSetProblem()) {
        this.problem = new DeploymentException(other.problem);
      }
    }

    public publishArtifactLatestVersion_result deepCopy() {
      return new publishArtifactLatestVersion_result(this);
    }

    @Override
    public void clear() {
      this.problem = null;
    }

    public DeploymentException getProblem() {
      return this.problem;
    }

    public publishArtifactLatestVersion_result setProblem(DeploymentException problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((DeploymentException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishArtifactLatestVersion_result)
        return this.equals((publishArtifactLatestVersion_result)that);
      return false;
    }

    public boolean equals(publishArtifactLatestVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(publishArtifactLatestVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishArtifactLatestVersion_result(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishArtifactLatestVersion_resultStandardSchemeFactory implements SchemeFactory {
      public publishArtifactLatestVersion_resultStandardScheme getScheme() {
        return new publishArtifactLatestVersion_resultStandardScheme();
      }
    }

    private static class publishArtifactLatestVersion_resultStandardScheme extends StandardScheme<publishArtifactLatestVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishArtifactLatestVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.problem = new DeploymentException();
                struct.problem.read(iprot);
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishArtifactLatestVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          struct.problem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishArtifactLatestVersion_resultTupleSchemeFactory implements SchemeFactory {
      public publishArtifactLatestVersion_resultTupleScheme getScheme() {
        return new publishArtifactLatestVersion_resultTupleScheme();
      }
    }

    private static class publishArtifactLatestVersion_resultTupleScheme extends TupleScheme<publishArtifactLatestVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishArtifactLatestVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProblem()) {
          struct.problem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishArtifactLatestVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.problem = new DeploymentException();
          struct.problem.read(iprot);
          struct.setProblemIsSet(true);
        }
      }
    }

  }

  public static class publishArtifact_args implements org.apache.thrift.TBase<publishArtifact_args, publishArtifact_args._Fields>, java.io.Serializable, Cloneable, Comparable<publishArtifact_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishArtifact_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishArtifact_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishArtifact_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public String serviceId; // required
    public String version; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      SERVICE_ID((short)2, "serviceId"),
      VERSION((short)3, "version"),
      TOKEN((short)4, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // SERVICE_ID
            return SERVICE_ID;
          case 3: // VERSION
            return VERSION;
          case 4: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishArtifact_args.class, metaDataMap);
    }

    public publishArtifact_args() {
    }

    public publishArtifact_args(
      String applicationId,
      String serviceId,
      String version,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.applicationId = applicationId;
      this.serviceId = serviceId;
      this.version = version;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishArtifact_args(publishArtifact_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      if (other.isSetServiceId()) {
        this.serviceId = other.serviceId;
      }
      if (other.isSetVersion()) {
        this.version = other.version;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public publishArtifact_args deepCopy() {
      return new publishArtifact_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      this.serviceId = null;
      this.version = null;
      this.token = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public publishArtifact_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public String getServiceId() {
      return this.serviceId;
    }

    public publishArtifact_args setServiceId(String serviceId) {
      this.serviceId = serviceId;
      return this;
    }

    public void unsetServiceId() {
      this.serviceId = null;
    }

    /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceId() {
      return this.serviceId != null;
    }

    public void setServiceIdIsSet(boolean value) {
      if (!value) {
        this.serviceId = null;
      }
    }

    public String getVersion() {
      return this.version;
    }

    public publishArtifact_args setVersion(String version) {
      this.version = version;
      return this;
    }

    public void unsetVersion() {
      this.version = null;
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return this.version != null;
    }

    public void setVersionIsSet(boolean value) {
      if (!value) {
        this.version = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public publishArtifact_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case SERVICE_ID:
        if (value == null) {
          unsetServiceId();
        } else {
          setServiceId((String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case SERVICE_ID:
        return getServiceId();

      case VERSION:
        return getVersion();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case SERVICE_ID:
        return isSetServiceId();
      case VERSION:
        return isSetVersion();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishArtifact_args)
        return this.equals((publishArtifact_args)that);
      return false;
    }

    public boolean equals(publishArtifact_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_serviceId = true && this.isSetServiceId();
      boolean that_present_serviceId = true && that.isSetServiceId();
      if (this_present_serviceId || that_present_serviceId) {
        if (!(this_present_serviceId && that_present_serviceId))
          return false;
        if (!this.serviceId.equals(that.serviceId))
          return false;
      }

      boolean this_present_version = true && this.isSetVersion();
      boolean that_present_version = true && that.isSetVersion();
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (!this.version.equals(that.version))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(publishArtifact_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishArtifact_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceId:");
      if (this.serviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishArtifact_argsStandardSchemeFactory implements SchemeFactory {
      public publishArtifact_argsStandardScheme getScheme() {
        return new publishArtifact_argsStandardScheme();
      }
    }

    private static class publishArtifact_argsStandardScheme extends StandardScheme<publishArtifact_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishArtifact_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceId = iprot.readString();
                struct.setServiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.version = iprot.readString();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishArtifact_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        if (struct.serviceId != null) {
          oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
          oprot.writeString(struct.serviceId);
          oprot.writeFieldEnd();
        }
        if (struct.version != null) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishArtifact_argsTupleSchemeFactory implements SchemeFactory {
      public publishArtifact_argsTupleScheme getScheme() {
        return new publishArtifact_argsTupleScheme();
      }
    }

    private static class publishArtifact_argsTupleScheme extends TupleScheme<publishArtifact_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishArtifact_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetServiceId()) {
          optionals.set(1);
        }
        if (struct.isSetVersion()) {
          optionals.set(2);
        }
        if (struct.isSetToken()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetServiceId()) {
          oprot.writeString(struct.serviceId);
        }
        if (struct.isSetVersion()) {
          oprot.writeString(struct.version);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishArtifact_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceId = iprot.readString();
          struct.setServiceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.version = iprot.readString();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class publishArtifact_result implements org.apache.thrift.TBase<publishArtifact_result, publishArtifact_result._Fields>, java.io.Serializable, Cloneable, Comparable<publishArtifact_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishArtifact_result");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishArtifact_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishArtifact_resultTupleSchemeFactory());
    }

    public DeploymentException problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishArtifact_result.class, metaDataMap);
    }

    public publishArtifact_result() {
    }

    public publishArtifact_result(
      DeploymentException problem)
    {
      this();
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishArtifact_result(publishArtifact_result other) {
      if (other.isSetProblem()) {
        this.problem = new DeploymentException(other.problem);
      }
    }

    public publishArtifact_result deepCopy() {
      return new publishArtifact_result(this);
    }

    @Override
    public void clear() {
      this.problem = null;
    }

    public DeploymentException getProblem() {
      return this.problem;
    }

    public publishArtifact_result setProblem(DeploymentException problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((DeploymentException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishArtifact_result)
        return this.equals((publishArtifact_result)that);
      return false;
    }

    public boolean equals(publishArtifact_result that) {
      if (that == null)
        return false;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(publishArtifact_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishArtifact_result(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishArtifact_resultStandardSchemeFactory implements SchemeFactory {
      public publishArtifact_resultStandardScheme getScheme() {
        return new publishArtifact_resultStandardScheme();
      }
    }

    private static class publishArtifact_resultStandardScheme extends StandardScheme<publishArtifact_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishArtifact_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.problem = new DeploymentException();
                struct.problem.read(iprot);
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishArtifact_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          struct.problem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishArtifact_resultTupleSchemeFactory implements SchemeFactory {
      public publishArtifact_resultTupleScheme getScheme() {
        return new publishArtifact_resultTupleScheme();
      }
    }

    private static class publishArtifact_resultTupleScheme extends TupleScheme<publishArtifact_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishArtifact_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProblem()) {
          struct.problem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishArtifact_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.problem = new DeploymentException();
          struct.problem.read(iprot);
          struct.setProblemIsSet(true);
        }
      }
    }

  }

  public static class deleteArtifact_args implements org.apache.thrift.TBase<deleteArtifact_args, deleteArtifact_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteArtifact_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteArtifact_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteArtifact_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteArtifact_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public String serviceId; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      SERVICE_ID((short)2, "serviceId"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // SERVICE_ID
            return SERVICE_ID;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteArtifact_args.class, metaDataMap);
    }

    public deleteArtifact_args() {
    }

    public deleteArtifact_args(
      String applicationId,
      String serviceId,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.applicationId = applicationId;
      this.serviceId = serviceId;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteArtifact_args(deleteArtifact_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      if (other.isSetServiceId()) {
        this.serviceId = other.serviceId;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public deleteArtifact_args deepCopy() {
      return new deleteArtifact_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      this.serviceId = null;
      this.token = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public deleteArtifact_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public String getServiceId() {
      return this.serviceId;
    }

    public deleteArtifact_args setServiceId(String serviceId) {
      this.serviceId = serviceId;
      return this;
    }

    public void unsetServiceId() {
      this.serviceId = null;
    }

    /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceId() {
      return this.serviceId != null;
    }

    public void setServiceIdIsSet(boolean value) {
      if (!value) {
        this.serviceId = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public deleteArtifact_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case SERVICE_ID:
        if (value == null) {
          unsetServiceId();
        } else {
          setServiceId((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case SERVICE_ID:
        return getServiceId();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case SERVICE_ID:
        return isSetServiceId();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteArtifact_args)
        return this.equals((deleteArtifact_args)that);
      return false;
    }

    public boolean equals(deleteArtifact_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_serviceId = true && this.isSetServiceId();
      boolean that_present_serviceId = true && that.isSetServiceId();
      if (this_present_serviceId || that_present_serviceId) {
        if (!(this_present_serviceId && that_present_serviceId))
          return false;
        if (!this.serviceId.equals(that.serviceId))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteArtifact_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteArtifact_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceId:");
      if (this.serviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteArtifact_argsStandardSchemeFactory implements SchemeFactory {
      public deleteArtifact_argsStandardScheme getScheme() {
        return new deleteArtifact_argsStandardScheme();
      }
    }

    private static class deleteArtifact_argsStandardScheme extends StandardScheme<deleteArtifact_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteArtifact_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceId = iprot.readString();
                struct.setServiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteArtifact_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        if (struct.serviceId != null) {
          oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
          oprot.writeString(struct.serviceId);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteArtifact_argsTupleSchemeFactory implements SchemeFactory {
      public deleteArtifact_argsTupleScheme getScheme() {
        return new deleteArtifact_argsTupleScheme();
      }
    }

    private static class deleteArtifact_argsTupleScheme extends TupleScheme<deleteArtifact_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteArtifact_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetServiceId()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetServiceId()) {
          oprot.writeString(struct.serviceId);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteArtifact_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceId = iprot.readString();
          struct.setServiceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class deleteArtifact_result implements org.apache.thrift.TBase<deleteArtifact_result, deleteArtifact_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteArtifact_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteArtifact_result");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteArtifact_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteArtifact_resultTupleSchemeFactory());
    }

    public DeploymentException problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteArtifact_result.class, metaDataMap);
    }

    public deleteArtifact_result() {
    }

    public deleteArtifact_result(
      DeploymentException problem)
    {
      this();
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteArtifact_result(deleteArtifact_result other) {
      if (other.isSetProblem()) {
        this.problem = new DeploymentException(other.problem);
      }
    }

    public deleteArtifact_result deepCopy() {
      return new deleteArtifact_result(this);
    }

    @Override
    public void clear() {
      this.problem = null;
    }

    public DeploymentException getProblem() {
      return this.problem;
    }

    public deleteArtifact_result setProblem(DeploymentException problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((DeploymentException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteArtifact_result)
        return this.equals((deleteArtifact_result)that);
      return false;
    }

    public boolean equals(deleteArtifact_result that) {
      if (that == null)
        return false;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteArtifact_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteArtifact_result(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteArtifact_resultStandardSchemeFactory implements SchemeFactory {
      public deleteArtifact_resultStandardScheme getScheme() {
        return new deleteArtifact_resultStandardScheme();
      }
    }

    private static class deleteArtifact_resultStandardScheme extends StandardScheme<deleteArtifact_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteArtifact_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.problem = new DeploymentException();
                struct.problem.read(iprot);
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteArtifact_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          struct.problem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteArtifact_resultTupleSchemeFactory implements SchemeFactory {
      public deleteArtifact_resultTupleScheme getScheme() {
        return new deleteArtifact_resultTupleScheme();
      }
    }

    private static class deleteArtifact_resultTupleScheme extends TupleScheme<deleteArtifact_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteArtifact_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProblem()) {
          struct.problem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteArtifact_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.problem = new DeploymentException();
          struct.problem.read(iprot);
          struct.setProblemIsSet(true);
        }
      }
    }

  }

  public static class stageServiceDeployment_args implements org.apache.thrift.TBase<stageServiceDeployment_args, stageServiceDeployment_args._Fields>, java.io.Serializable, Cloneable, Comparable<stageServiceDeployment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stageServiceDeployment_args");

    private static final org.apache.thrift.protocol.TField MANIFEST_FIELD_DESC = new org.apache.thrift.protocol.TField("manifest", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARTIFACT_FIELD_DESC = new org.apache.thrift.protocol.TField("artifact", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stageServiceDeployment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stageServiceDeployment_argsTupleSchemeFactory());
    }

    public ArtifactManifest manifest; // required
    public ByteBuffer artifact; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MANIFEST((short)1, "manifest"),
      ARTIFACT((short)2, "artifact"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MANIFEST
            return MANIFEST;
          case 2: // ARTIFACT
            return ARTIFACT;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MANIFEST, new org.apache.thrift.meta_data.FieldMetaData("manifest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ArtifactManifest.class)));
      tmpMap.put(_Fields.ARTIFACT, new org.apache.thrift.meta_data.FieldMetaData("artifact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stageServiceDeployment_args.class, metaDataMap);
    }

    public stageServiceDeployment_args() {
    }

    public stageServiceDeployment_args(
      ArtifactManifest manifest,
      ByteBuffer artifact,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.manifest = manifest;
      this.artifact = artifact;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stageServiceDeployment_args(stageServiceDeployment_args other) {
      if (other.isSetManifest()) {
        this.manifest = new ArtifactManifest(other.manifest);
      }
      if (other.isSetArtifact()) {
        this.artifact = org.apache.thrift.TBaseHelper.copyBinary(other.artifact);
;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public stageServiceDeployment_args deepCopy() {
      return new stageServiceDeployment_args(this);
    }

    @Override
    public void clear() {
      this.manifest = null;
      this.artifact = null;
      this.token = null;
    }

    public ArtifactManifest getManifest() {
      return this.manifest;
    }

    public stageServiceDeployment_args setManifest(ArtifactManifest manifest) {
      this.manifest = manifest;
      return this;
    }

    public void unsetManifest() {
      this.manifest = null;
    }

    /** Returns true if field manifest is set (has been assigned a value) and false otherwise */
    public boolean isSetManifest() {
      return this.manifest != null;
    }

    public void setManifestIsSet(boolean value) {
      if (!value) {
        this.manifest = null;
      }
    }

    public byte[] getArtifact() {
      setArtifact(org.apache.thrift.TBaseHelper.rightSize(artifact));
      return artifact == null ? null : artifact.array();
    }

    public ByteBuffer bufferForArtifact() {
      return artifact;
    }

    public stageServiceDeployment_args setArtifact(byte[] artifact) {
      setArtifact(artifact == null ? (ByteBuffer)null : ByteBuffer.wrap(artifact));
      return this;
    }

    public stageServiceDeployment_args setArtifact(ByteBuffer artifact) {
      this.artifact = artifact;
      return this;
    }

    public void unsetArtifact() {
      this.artifact = null;
    }

    /** Returns true if field artifact is set (has been assigned a value) and false otherwise */
    public boolean isSetArtifact() {
      return this.artifact != null;
    }

    public void setArtifactIsSet(boolean value) {
      if (!value) {
        this.artifact = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public stageServiceDeployment_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MANIFEST:
        if (value == null) {
          unsetManifest();
        } else {
          setManifest((ArtifactManifest)value);
        }
        break;

      case ARTIFACT:
        if (value == null) {
          unsetArtifact();
        } else {
          setArtifact((ByteBuffer)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MANIFEST:
        return getManifest();

      case ARTIFACT:
        return getArtifact();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MANIFEST:
        return isSetManifest();
      case ARTIFACT:
        return isSetArtifact();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stageServiceDeployment_args)
        return this.equals((stageServiceDeployment_args)that);
      return false;
    }

    public boolean equals(stageServiceDeployment_args that) {
      if (that == null)
        return false;

      boolean this_present_manifest = true && this.isSetManifest();
      boolean that_present_manifest = true && that.isSetManifest();
      if (this_present_manifest || that_present_manifest) {
        if (!(this_present_manifest && that_present_manifest))
          return false;
        if (!this.manifest.equals(that.manifest))
          return false;
      }

      boolean this_present_artifact = true && this.isSetArtifact();
      boolean that_present_artifact = true && that.isSetArtifact();
      if (this_present_artifact || that_present_artifact) {
        if (!(this_present_artifact && that_present_artifact))
          return false;
        if (!this.artifact.equals(that.artifact))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(stageServiceDeployment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetManifest()).compareTo(other.isSetManifest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetManifest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manifest, other.manifest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArtifact()).compareTo(other.isSetArtifact());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArtifact()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artifact, other.artifact);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stageServiceDeployment_args(");
      boolean first = true;

      sb.append("manifest:");
      if (this.manifest == null) {
        sb.append("null");
      } else {
        sb.append(this.manifest);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("artifact:");
      if (this.artifact == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.artifact, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (manifest != null) {
        manifest.validate();
      }
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stageServiceDeployment_argsStandardSchemeFactory implements SchemeFactory {
      public stageServiceDeployment_argsStandardScheme getScheme() {
        return new stageServiceDeployment_argsStandardScheme();
      }
    }

    private static class stageServiceDeployment_argsStandardScheme extends StandardScheme<stageServiceDeployment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stageServiceDeployment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MANIFEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.manifest = new ArtifactManifest();
                struct.manifest.read(iprot);
                struct.setManifestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARTIFACT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.artifact = iprot.readBinary();
                struct.setArtifactIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stageServiceDeployment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.manifest != null) {
          oprot.writeFieldBegin(MANIFEST_FIELD_DESC);
          struct.manifest.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.artifact != null) {
          oprot.writeFieldBegin(ARTIFACT_FIELD_DESC);
          oprot.writeBinary(struct.artifact);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stageServiceDeployment_argsTupleSchemeFactory implements SchemeFactory {
      public stageServiceDeployment_argsTupleScheme getScheme() {
        return new stageServiceDeployment_argsTupleScheme();
      }
    }

    private static class stageServiceDeployment_argsTupleScheme extends TupleScheme<stageServiceDeployment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stageServiceDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetManifest()) {
          optionals.set(0);
        }
        if (struct.isSetArtifact()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetManifest()) {
          struct.manifest.write(oprot);
        }
        if (struct.isSetArtifact()) {
          oprot.writeBinary(struct.artifact);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stageServiceDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.manifest = new ArtifactManifest();
          struct.manifest.read(iprot);
          struct.setManifestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.artifact = iprot.readBinary();
          struct.setArtifactIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class stageServiceDeployment_result implements org.apache.thrift.TBase<stageServiceDeployment_result, stageServiceDeployment_result._Fields>, java.io.Serializable, Cloneable, Comparable<stageServiceDeployment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stageServiceDeployment_result");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stageServiceDeployment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stageServiceDeployment_resultTupleSchemeFactory());
    }

    public DeploymentException problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stageServiceDeployment_result.class, metaDataMap);
    }

    public stageServiceDeployment_result() {
    }

    public stageServiceDeployment_result(
      DeploymentException problem)
    {
      this();
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stageServiceDeployment_result(stageServiceDeployment_result other) {
      if (other.isSetProblem()) {
        this.problem = new DeploymentException(other.problem);
      }
    }

    public stageServiceDeployment_result deepCopy() {
      return new stageServiceDeployment_result(this);
    }

    @Override
    public void clear() {
      this.problem = null;
    }

    public DeploymentException getProblem() {
      return this.problem;
    }

    public stageServiceDeployment_result setProblem(DeploymentException problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((DeploymentException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stageServiceDeployment_result)
        return this.equals((stageServiceDeployment_result)that);
      return false;
    }

    public boolean equals(stageServiceDeployment_result that) {
      if (that == null)
        return false;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(stageServiceDeployment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stageServiceDeployment_result(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stageServiceDeployment_resultStandardSchemeFactory implements SchemeFactory {
      public stageServiceDeployment_resultStandardScheme getScheme() {
        return new stageServiceDeployment_resultStandardScheme();
      }
    }

    private static class stageServiceDeployment_resultStandardScheme extends StandardScheme<stageServiceDeployment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stageServiceDeployment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.problem = new DeploymentException();
                struct.problem.read(iprot);
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stageServiceDeployment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          struct.problem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stageServiceDeployment_resultTupleSchemeFactory implements SchemeFactory {
      public stageServiceDeployment_resultTupleScheme getScheme() {
        return new stageServiceDeployment_resultTupleScheme();
      }
    }

    private static class stageServiceDeployment_resultTupleScheme extends TupleScheme<stageServiceDeployment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stageServiceDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProblem()) {
          struct.problem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stageServiceDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.problem = new DeploymentException();
          struct.problem.read(iprot);
          struct.setProblemIsSet(true);
        }
      }
    }

  }

  public static class unstageServiceDeployment_args implements org.apache.thrift.TBase<unstageServiceDeployment_args, unstageServiceDeployment_args._Fields>, java.io.Serializable, Cloneable, Comparable<unstageServiceDeployment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unstageServiceDeployment_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unstageServiceDeployment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unstageServiceDeployment_argsTupleSchemeFactory());
    }

    public String applicationId; // required
    public String serviceId; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_ID((short)1, "applicationId"),
      SERVICE_ID((short)2, "serviceId"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_ID
            return APPLICATION_ID;
          case 2: // SERVICE_ID
            return SERVICE_ID;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unstageServiceDeployment_args.class, metaDataMap);
    }

    public unstageServiceDeployment_args() {
    }

    public unstageServiceDeployment_args(
      String applicationId,
      String serviceId,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.applicationId = applicationId;
      this.serviceId = serviceId;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unstageServiceDeployment_args(unstageServiceDeployment_args other) {
      if (other.isSetApplicationId()) {
        this.applicationId = other.applicationId;
      }
      if (other.isSetServiceId()) {
        this.serviceId = other.serviceId;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public unstageServiceDeployment_args deepCopy() {
      return new unstageServiceDeployment_args(this);
    }

    @Override
    public void clear() {
      this.applicationId = null;
      this.serviceId = null;
      this.token = null;
    }

    public String getApplicationId() {
      return this.applicationId;
    }

    public unstageServiceDeployment_args setApplicationId(String applicationId) {
      this.applicationId = applicationId;
      return this;
    }

    public void unsetApplicationId() {
      this.applicationId = null;
    }

    /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationId() {
      return this.applicationId != null;
    }

    public void setApplicationIdIsSet(boolean value) {
      if (!value) {
        this.applicationId = null;
      }
    }

    public String getServiceId() {
      return this.serviceId;
    }

    public unstageServiceDeployment_args setServiceId(String serviceId) {
      this.serviceId = serviceId;
      return this;
    }

    public void unsetServiceId() {
      this.serviceId = null;
    }

    /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceId() {
      return this.serviceId != null;
    }

    public void setServiceIdIsSet(boolean value) {
      if (!value) {
        this.serviceId = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public unstageServiceDeployment_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_ID:
        if (value == null) {
          unsetApplicationId();
        } else {
          setApplicationId((String)value);
        }
        break;

      case SERVICE_ID:
        if (value == null) {
          unsetServiceId();
        } else {
          setServiceId((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_ID:
        return getApplicationId();

      case SERVICE_ID:
        return getServiceId();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_ID:
        return isSetApplicationId();
      case SERVICE_ID:
        return isSetServiceId();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unstageServiceDeployment_args)
        return this.equals((unstageServiceDeployment_args)that);
      return false;
    }

    public boolean equals(unstageServiceDeployment_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationId = true && this.isSetApplicationId();
      boolean that_present_applicationId = true && that.isSetApplicationId();
      if (this_present_applicationId || that_present_applicationId) {
        if (!(this_present_applicationId && that_present_applicationId))
          return false;
        if (!this.applicationId.equals(that.applicationId))
          return false;
      }

      boolean this_present_serviceId = true && this.isSetServiceId();
      boolean that_present_serviceId = true && that.isSetServiceId();
      if (this_present_serviceId || that_present_serviceId) {
        if (!(this_present_serviceId && that_present_serviceId))
          return false;
        if (!this.serviceId.equals(that.serviceId))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(unstageServiceDeployment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(other.isSetApplicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unstageServiceDeployment_args(");
      boolean first = true;

      sb.append("applicationId:");
      if (this.applicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceId:");
      if (this.serviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unstageServiceDeployment_argsStandardSchemeFactory implements SchemeFactory {
      public unstageServiceDeployment_argsStandardScheme getScheme() {
        return new unstageServiceDeployment_argsStandardScheme();
      }
    }

    private static class unstageServiceDeployment_argsStandardScheme extends StandardScheme<unstageServiceDeployment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unstageServiceDeployment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationId = iprot.readString();
                struct.setApplicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceId = iprot.readString();
                struct.setServiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unstageServiceDeployment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationId != null) {
          oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
          oprot.writeString(struct.applicationId);
          oprot.writeFieldEnd();
        }
        if (struct.serviceId != null) {
          oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
          oprot.writeString(struct.serviceId);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unstageServiceDeployment_argsTupleSchemeFactory implements SchemeFactory {
      public unstageServiceDeployment_argsTupleScheme getScheme() {
        return new unstageServiceDeployment_argsTupleScheme();
      }
    }

    private static class unstageServiceDeployment_argsTupleScheme extends TupleScheme<unstageServiceDeployment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unstageServiceDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationId()) {
          optionals.set(0);
        }
        if (struct.isSetServiceId()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetApplicationId()) {
          oprot.writeString(struct.applicationId);
        }
        if (struct.isSetServiceId()) {
          oprot.writeString(struct.serviceId);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unstageServiceDeployment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.applicationId = iprot.readString();
          struct.setApplicationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceId = iprot.readString();
          struct.setServiceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class unstageServiceDeployment_result implements org.apache.thrift.TBase<unstageServiceDeployment_result, unstageServiceDeployment_result._Fields>, java.io.Serializable, Cloneable, Comparable<unstageServiceDeployment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unstageServiceDeployment_result");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unstageServiceDeployment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unstageServiceDeployment_resultTupleSchemeFactory());
    }

    public DeploymentException problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unstageServiceDeployment_result.class, metaDataMap);
    }

    public unstageServiceDeployment_result() {
    }

    public unstageServiceDeployment_result(
      DeploymentException problem)
    {
      this();
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unstageServiceDeployment_result(unstageServiceDeployment_result other) {
      if (other.isSetProblem()) {
        this.problem = new DeploymentException(other.problem);
      }
    }

    public unstageServiceDeployment_result deepCopy() {
      return new unstageServiceDeployment_result(this);
    }

    @Override
    public void clear() {
      this.problem = null;
    }

    public DeploymentException getProblem() {
      return this.problem;
    }

    public unstageServiceDeployment_result setProblem(DeploymentException problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((DeploymentException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unstageServiceDeployment_result)
        return this.equals((unstageServiceDeployment_result)that);
      return false;
    }

    public boolean equals(unstageServiceDeployment_result that) {
      if (that == null)
        return false;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(unstageServiceDeployment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unstageServiceDeployment_result(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unstageServiceDeployment_resultStandardSchemeFactory implements SchemeFactory {
      public unstageServiceDeployment_resultStandardScheme getScheme() {
        return new unstageServiceDeployment_resultStandardScheme();
      }
    }

    private static class unstageServiceDeployment_resultStandardScheme extends StandardScheme<unstageServiceDeployment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unstageServiceDeployment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.problem = new DeploymentException();
                struct.problem.read(iprot);
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unstageServiceDeployment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          struct.problem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unstageServiceDeployment_resultTupleSchemeFactory implements SchemeFactory {
      public unstageServiceDeployment_resultTupleScheme getScheme() {
        return new unstageServiceDeployment_resultTupleScheme();
      }
    }

    private static class unstageServiceDeployment_resultTupleScheme extends TupleScheme<unstageServiceDeployment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unstageServiceDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProblem()) {
          struct.problem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unstageServiceDeployment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.problem = new DeploymentException();
          struct.problem.read(iprot);
          struct.setProblemIsSet(true);
        }
      }
    }

  }

  public static class updateDeploymentMetadata_args implements org.apache.thrift.TBase<updateDeploymentMetadata_args, updateDeploymentMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateDeploymentMetadata_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDeploymentMetadata_args");

    private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDeploymentMetadata_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDeploymentMetadata_argsTupleSchemeFactory());
    }

    public DeploymentMetadata metadata; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      METADATA((short)1, "metadata"),
      TOKEN((short)2, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // METADATA
            return METADATA;
          case 2: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeploymentMetadata.class)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDeploymentMetadata_args.class, metaDataMap);
    }

    public updateDeploymentMetadata_args() {
    }

    public updateDeploymentMetadata_args(
      DeploymentMetadata metadata,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.metadata = metadata;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDeploymentMetadata_args(updateDeploymentMetadata_args other) {
      if (other.isSetMetadata()) {
        this.metadata = new DeploymentMetadata(other.metadata);
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public updateDeploymentMetadata_args deepCopy() {
      return new updateDeploymentMetadata_args(this);
    }

    @Override
    public void clear() {
      this.metadata = null;
      this.token = null;
    }

    public DeploymentMetadata getMetadata() {
      return this.metadata;
    }

    public updateDeploymentMetadata_args setMetadata(DeploymentMetadata metadata) {
      this.metadata = metadata;
      return this;
    }

    public void unsetMetadata() {
      this.metadata = null;
    }

    /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadata() {
      return this.metadata != null;
    }

    public void setMetadataIsSet(boolean value) {
      if (!value) {
        this.metadata = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public updateDeploymentMetadata_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case METADATA:
        if (value == null) {
          unsetMetadata();
        } else {
          setMetadata((DeploymentMetadata)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case METADATA:
        return getMetadata();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case METADATA:
        return isSetMetadata();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDeploymentMetadata_args)
        return this.equals((updateDeploymentMetadata_args)that);
      return false;
    }

    public boolean equals(updateDeploymentMetadata_args that) {
      if (that == null)
        return false;

      boolean this_present_metadata = true && this.isSetMetadata();
      boolean that_present_metadata = true && that.isSetMetadata();
      if (this_present_metadata || that_present_metadata) {
        if (!(this_present_metadata && that_present_metadata))
          return false;
        if (!this.metadata.equals(that.metadata))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateDeploymentMetadata_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDeploymentMetadata_args(");
      boolean first = true;

      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (metadata != null) {
        metadata.validate();
      }
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDeploymentMetadata_argsStandardSchemeFactory implements SchemeFactory {
      public updateDeploymentMetadata_argsStandardScheme getScheme() {
        return new updateDeploymentMetadata_argsStandardScheme();
      }
    }

    private static class updateDeploymentMetadata_argsStandardScheme extends StandardScheme<updateDeploymentMetadata_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDeploymentMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.metadata = new DeploymentMetadata();
                struct.metadata.read(iprot);
                struct.setMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDeploymentMetadata_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.metadata != null) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          struct.metadata.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDeploymentMetadata_argsTupleSchemeFactory implements SchemeFactory {
      public updateDeploymentMetadata_argsTupleScheme getScheme() {
        return new updateDeploymentMetadata_argsTupleScheme();
      }
    }

    private static class updateDeploymentMetadata_argsTupleScheme extends TupleScheme<updateDeploymentMetadata_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDeploymentMetadata_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMetadata()) {
          optionals.set(0);
        }
        if (struct.isSetToken()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMetadata()) {
          struct.metadata.write(oprot);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDeploymentMetadata_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.metadata = new DeploymentMetadata();
          struct.metadata.read(iprot);
          struct.setMetadataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class updateDeploymentMetadata_result implements org.apache.thrift.TBase<updateDeploymentMetadata_result, updateDeploymentMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateDeploymentMetadata_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDeploymentMetadata_result");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDeploymentMetadata_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDeploymentMetadata_resultTupleSchemeFactory());
    }

    public DeploymentException problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDeploymentMetadata_result.class, metaDataMap);
    }

    public updateDeploymentMetadata_result() {
    }

    public updateDeploymentMetadata_result(
      DeploymentException problem)
    {
      this();
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDeploymentMetadata_result(updateDeploymentMetadata_result other) {
      if (other.isSetProblem()) {
        this.problem = new DeploymentException(other.problem);
      }
    }

    public updateDeploymentMetadata_result deepCopy() {
      return new updateDeploymentMetadata_result(this);
    }

    @Override
    public void clear() {
      this.problem = null;
    }

    public DeploymentException getProblem() {
      return this.problem;
    }

    public updateDeploymentMetadata_result setProblem(DeploymentException problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((DeploymentException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDeploymentMetadata_result)
        return this.equals((updateDeploymentMetadata_result)that);
      return false;
    }

    public boolean equals(updateDeploymentMetadata_result that) {
      if (that == null)
        return false;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateDeploymentMetadata_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDeploymentMetadata_result(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDeploymentMetadata_resultStandardSchemeFactory implements SchemeFactory {
      public updateDeploymentMetadata_resultStandardScheme getScheme() {
        return new updateDeploymentMetadata_resultStandardScheme();
      }
    }

    private static class updateDeploymentMetadata_resultStandardScheme extends StandardScheme<updateDeploymentMetadata_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDeploymentMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.problem = new DeploymentException();
                struct.problem.read(iprot);
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDeploymentMetadata_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          struct.problem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDeploymentMetadata_resultTupleSchemeFactory implements SchemeFactory {
      public updateDeploymentMetadata_resultTupleScheme getScheme() {
        return new updateDeploymentMetadata_resultTupleScheme();
      }
    }

    private static class updateDeploymentMetadata_resultTupleScheme extends TupleScheme<updateDeploymentMetadata_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDeploymentMetadata_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProblem()) {
          struct.problem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDeploymentMetadata_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.problem = new DeploymentException();
          struct.problem.read(iprot);
          struct.setProblemIsSet(true);
        }
      }
    }

  }

}
