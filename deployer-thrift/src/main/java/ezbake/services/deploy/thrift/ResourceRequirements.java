/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.deploy.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ResourceRequirements implements org.apache.thrift.TBase<ResourceRequirements, ResourceRequirements._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequirements> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequirements");

  private static final org.apache.thrift.protocol.TField CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("mem", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DISK_FIELD_DESC = new org.apache.thrift.protocol.TField("disk", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResourceRequirementsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResourceRequirementsTupleSchemeFactory());
  }

  /**
   * 
   * @see ResourceReq
   */
  public ResourceReq cpu; // optional
  /**
   * 
   * @see ResourceReq
   */
  public ResourceReq mem; // optional
  /**
   * 
   * @see ResourceReq
   */
  public ResourceReq disk; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ResourceReq
     */
    CPU((short)1, "cpu"),
    /**
     * 
     * @see ResourceReq
     */
    MEM((short)2, "mem"),
    /**
     * 
     * @see ResourceReq
     */
    DISK((short)3, "disk");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CPU
          return CPU;
        case 2: // MEM
          return MEM;
        case 3: // DISK
          return DISK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CPU,_Fields.MEM,_Fields.DISK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CPU, new org.apache.thrift.meta_data.FieldMetaData("cpu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ResourceReq.class)));
    tmpMap.put(_Fields.MEM, new org.apache.thrift.meta_data.FieldMetaData("mem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ResourceReq.class)));
    tmpMap.put(_Fields.DISK, new org.apache.thrift.meta_data.FieldMetaData("disk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ResourceReq.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequirements.class, metaDataMap);
  }

  public ResourceRequirements() {
    this.cpu = ezbake.services.deploy.thrift.ResourceReq.small;

    this.mem = ezbake.services.deploy.thrift.ResourceReq.small;

    this.disk = ezbake.services.deploy.thrift.ResourceReq.small;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResourceRequirements(ResourceRequirements other) {
    if (other.isSetCpu()) {
      this.cpu = other.cpu;
    }
    if (other.isSetMem()) {
      this.mem = other.mem;
    }
    if (other.isSetDisk()) {
      this.disk = other.disk;
    }
  }

  public ResourceRequirements deepCopy() {
    return new ResourceRequirements(this);
  }

  @Override
  public void clear() {
    this.cpu = ezbake.services.deploy.thrift.ResourceReq.small;

    this.mem = ezbake.services.deploy.thrift.ResourceReq.small;

    this.disk = ezbake.services.deploy.thrift.ResourceReq.small;

  }

  /**
   * 
   * @see ResourceReq
   */
  public ResourceReq getCpu() {
    return this.cpu;
  }

  /**
   * 
   * @see ResourceReq
   */
  public ResourceRequirements setCpu(ResourceReq cpu) {
    this.cpu = cpu;
    return this;
  }

  public void unsetCpu() {
    this.cpu = null;
  }

  /** Returns true if field cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu() {
    return this.cpu != null;
  }

  public void setCpuIsSet(boolean value) {
    if (!value) {
      this.cpu = null;
    }
  }

  /**
   * 
   * @see ResourceReq
   */
  public ResourceReq getMem() {
    return this.mem;
  }

  /**
   * 
   * @see ResourceReq
   */
  public ResourceRequirements setMem(ResourceReq mem) {
    this.mem = mem;
    return this;
  }

  public void unsetMem() {
    this.mem = null;
  }

  /** Returns true if field mem is set (has been assigned a value) and false otherwise */
  public boolean isSetMem() {
    return this.mem != null;
  }

  public void setMemIsSet(boolean value) {
    if (!value) {
      this.mem = null;
    }
  }

  /**
   * 
   * @see ResourceReq
   */
  public ResourceReq getDisk() {
    return this.disk;
  }

  /**
   * 
   * @see ResourceReq
   */
  public ResourceRequirements setDisk(ResourceReq disk) {
    this.disk = disk;
    return this;
  }

  public void unsetDisk() {
    this.disk = null;
  }

  /** Returns true if field disk is set (has been assigned a value) and false otherwise */
  public boolean isSetDisk() {
    return this.disk != null;
  }

  public void setDiskIsSet(boolean value) {
    if (!value) {
      this.disk = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CPU:
      if (value == null) {
        unsetCpu();
      } else {
        setCpu((ResourceReq)value);
      }
      break;

    case MEM:
      if (value == null) {
        unsetMem();
      } else {
        setMem((ResourceReq)value);
      }
      break;

    case DISK:
      if (value == null) {
        unsetDisk();
      } else {
        setDisk((ResourceReq)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CPU:
      return getCpu();

    case MEM:
      return getMem();

    case DISK:
      return getDisk();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CPU:
      return isSetCpu();
    case MEM:
      return isSetMem();
    case DISK:
      return isSetDisk();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResourceRequirements)
      return this.equals((ResourceRequirements)that);
    return false;
  }

  public boolean equals(ResourceRequirements that) {
    if (that == null)
      return false;

    boolean this_present_cpu = true && this.isSetCpu();
    boolean that_present_cpu = true && that.isSetCpu();
    if (this_present_cpu || that_present_cpu) {
      if (!(this_present_cpu && that_present_cpu))
        return false;
      if (!this.cpu.equals(that.cpu))
        return false;
    }

    boolean this_present_mem = true && this.isSetMem();
    boolean that_present_mem = true && that.isSetMem();
    if (this_present_mem || that_present_mem) {
      if (!(this_present_mem && that_present_mem))
        return false;
      if (!this.mem.equals(that.mem))
        return false;
    }

    boolean this_present_disk = true && this.isSetDisk();
    boolean that_present_disk = true && that.isSetDisk();
    if (this_present_disk || that_present_disk) {
      if (!(this_present_disk && that_present_disk))
        return false;
      if (!this.disk.equals(that.disk))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ResourceRequirements other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCpu()).compareTo(other.isSetCpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu, other.cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMem()).compareTo(other.isSetMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem, other.mem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisk()).compareTo(other.isSetDisk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disk, other.disk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResourceRequirements(");
    boolean first = true;

    if (isSetCpu()) {
      sb.append("cpu:");
      if (this.cpu == null) {
        sb.append("null");
      } else {
        sb.append(this.cpu);
      }
      first = false;
    }
    if (isSetMem()) {
      if (!first) sb.append(", ");
      sb.append("mem:");
      if (this.mem == null) {
        sb.append("null");
      } else {
        sb.append(this.mem);
      }
      first = false;
    }
    if (isSetDisk()) {
      if (!first) sb.append(", ");
      sb.append("disk:");
      if (this.disk == null) {
        sb.append("null");
      } else {
        sb.append(this.disk);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResourceRequirementsStandardSchemeFactory implements SchemeFactory {
    public ResourceRequirementsStandardScheme getScheme() {
      return new ResourceRequirementsStandardScheme();
    }
  }

  private static class ResourceRequirementsStandardScheme extends StandardScheme<ResourceRequirements> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequirements struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpu = ResourceReq.findByValue(iprot.readI32());
              struct.setCpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mem = ResourceReq.findByValue(iprot.readI32());
              struct.setMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.disk = ResourceReq.findByValue(iprot.readI32());
              struct.setDiskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequirements struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cpu != null) {
        if (struct.isSetCpu()) {
          oprot.writeFieldBegin(CPU_FIELD_DESC);
          oprot.writeI32(struct.cpu.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.mem != null) {
        if (struct.isSetMem()) {
          oprot.writeFieldBegin(MEM_FIELD_DESC);
          oprot.writeI32(struct.mem.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.disk != null) {
        if (struct.isSetDisk()) {
          oprot.writeFieldBegin(DISK_FIELD_DESC);
          oprot.writeI32(struct.disk.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResourceRequirementsTupleSchemeFactory implements SchemeFactory {
    public ResourceRequirementsTupleScheme getScheme() {
      return new ResourceRequirementsTupleScheme();
    }
  }

  private static class ResourceRequirementsTupleScheme extends TupleScheme<ResourceRequirements> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequirements struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCpu()) {
        optionals.set(0);
      }
      if (struct.isSetMem()) {
        optionals.set(1);
      }
      if (struct.isSetDisk()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCpu()) {
        oprot.writeI32(struct.cpu.getValue());
      }
      if (struct.isSetMem()) {
        oprot.writeI32(struct.mem.getValue());
      }
      if (struct.isSetDisk()) {
        oprot.writeI32(struct.disk.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequirements struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.cpu = ResourceReq.findByValue(iprot.readI32());
        struct.setCpuIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mem = ResourceReq.findByValue(iprot.readI32());
        struct.setMemIsSet(true);
      }
      if (incoming.get(2)) {
        struct.disk = ResourceReq.findByValue(iprot.readI32());
        struct.setDiskIsSet(true);
      }
    }
  }

}

