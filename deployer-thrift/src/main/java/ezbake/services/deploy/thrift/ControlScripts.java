/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.deploy.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ControlScripts implements org.apache.thrift.TBase<ControlScripts, ControlScripts._Fields>, java.io.Serializable, Cloneable, Comparable<ControlScripts> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ControlScripts");

  private static final org.apache.thrift.protocol.TField START_SCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("startScript", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STOP_SCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("stopScript", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ControlScriptsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ControlScriptsTupleSchemeFactory());
  }

  public String startScript; // required
  public String stopScript; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_SCRIPT((short)1, "startScript"),
    STOP_SCRIPT((short)2, "stopScript");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_SCRIPT
          return START_SCRIPT;
        case 2: // STOP_SCRIPT
          return STOP_SCRIPT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_SCRIPT, new org.apache.thrift.meta_data.FieldMetaData("startScript", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOP_SCRIPT, new org.apache.thrift.meta_data.FieldMetaData("stopScript", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ControlScripts.class, metaDataMap);
  }

  public ControlScripts() {
  }

  public ControlScripts(
    String startScript,
    String stopScript)
  {
    this();
    this.startScript = startScript;
    this.stopScript = stopScript;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ControlScripts(ControlScripts other) {
    if (other.isSetStartScript()) {
      this.startScript = other.startScript;
    }
    if (other.isSetStopScript()) {
      this.stopScript = other.stopScript;
    }
  }

  public ControlScripts deepCopy() {
    return new ControlScripts(this);
  }

  @Override
  public void clear() {
    this.startScript = null;
    this.stopScript = null;
  }

  public String getStartScript() {
    return this.startScript;
  }

  public ControlScripts setStartScript(String startScript) {
    this.startScript = startScript;
    return this;
  }

  public void unsetStartScript() {
    this.startScript = null;
  }

  /** Returns true if field startScript is set (has been assigned a value) and false otherwise */
  public boolean isSetStartScript() {
    return this.startScript != null;
  }

  public void setStartScriptIsSet(boolean value) {
    if (!value) {
      this.startScript = null;
    }
  }

  public String getStopScript() {
    return this.stopScript;
  }

  public ControlScripts setStopScript(String stopScript) {
    this.stopScript = stopScript;
    return this;
  }

  public void unsetStopScript() {
    this.stopScript = null;
  }

  /** Returns true if field stopScript is set (has been assigned a value) and false otherwise */
  public boolean isSetStopScript() {
    return this.stopScript != null;
  }

  public void setStopScriptIsSet(boolean value) {
    if (!value) {
      this.stopScript = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_SCRIPT:
      if (value == null) {
        unsetStartScript();
      } else {
        setStartScript((String)value);
      }
      break;

    case STOP_SCRIPT:
      if (value == null) {
        unsetStopScript();
      } else {
        setStopScript((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_SCRIPT:
      return getStartScript();

    case STOP_SCRIPT:
      return getStopScript();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_SCRIPT:
      return isSetStartScript();
    case STOP_SCRIPT:
      return isSetStopScript();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ControlScripts)
      return this.equals((ControlScripts)that);
    return false;
  }

  public boolean equals(ControlScripts that) {
    if (that == null)
      return false;

    boolean this_present_startScript = true && this.isSetStartScript();
    boolean that_present_startScript = true && that.isSetStartScript();
    if (this_present_startScript || that_present_startScript) {
      if (!(this_present_startScript && that_present_startScript))
        return false;
      if (!this.startScript.equals(that.startScript))
        return false;
    }

    boolean this_present_stopScript = true && this.isSetStopScript();
    boolean that_present_stopScript = true && that.isSetStopScript();
    if (this_present_stopScript || that_present_stopScript) {
      if (!(this_present_stopScript && that_present_stopScript))
        return false;
      if (!this.stopScript.equals(that.stopScript))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ControlScripts other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStartScript()).compareTo(other.isSetStartScript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartScript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startScript, other.startScript);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopScript()).compareTo(other.isSetStopScript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopScript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopScript, other.stopScript);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ControlScripts(");
    boolean first = true;

    sb.append("startScript:");
    if (this.startScript == null) {
      sb.append("null");
    } else {
      sb.append(this.startScript);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stopScript:");
    if (this.stopScript == null) {
      sb.append("null");
    } else {
      sb.append(this.stopScript);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (startScript == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startScript' was not present! Struct: " + toString());
    }
    if (stopScript == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stopScript' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ControlScriptsStandardSchemeFactory implements SchemeFactory {
    public ControlScriptsStandardScheme getScheme() {
      return new ControlScriptsStandardScheme();
    }
  }

  private static class ControlScriptsStandardScheme extends StandardScheme<ControlScripts> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ControlScripts struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_SCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startScript = iprot.readString();
              struct.setStartScriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STOP_SCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stopScript = iprot.readString();
              struct.setStopScriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ControlScripts struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.startScript != null) {
        oprot.writeFieldBegin(START_SCRIPT_FIELD_DESC);
        oprot.writeString(struct.startScript);
        oprot.writeFieldEnd();
      }
      if (struct.stopScript != null) {
        oprot.writeFieldBegin(STOP_SCRIPT_FIELD_DESC);
        oprot.writeString(struct.stopScript);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ControlScriptsTupleSchemeFactory implements SchemeFactory {
    public ControlScriptsTupleScheme getScheme() {
      return new ControlScriptsTupleScheme();
    }
  }

  private static class ControlScriptsTupleScheme extends TupleScheme<ControlScripts> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ControlScripts struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.startScript);
      oprot.writeString(struct.stopScript);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ControlScripts struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.startScript = iprot.readString();
      struct.setStartScriptIsSet(true);
      struct.stopScript = iprot.readString();
      struct.setStopScriptIsSet(true);
    }
  }

}

