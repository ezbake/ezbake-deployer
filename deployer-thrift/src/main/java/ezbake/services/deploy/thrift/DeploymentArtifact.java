/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.deploy.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DeploymentArtifact implements org.apache.thrift.TBase<DeploymentArtifact, DeploymentArtifact._Fields>, java.io.Serializable, Cloneable, Comparable<DeploymentArtifact> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeploymentArtifact");

  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ARTIFACT_FIELD_DESC = new org.apache.thrift.protocol.TField("artifact", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeploymentArtifactStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DeploymentArtifactTupleSchemeFactory());
  }

  public ezbake.services.deploy.thrift.DeploymentMetadata metadata; // required
  public ByteBuffer artifact; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    METADATA((short)1, "metadata"),
    ARTIFACT((short)2, "artifact");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // METADATA
          return METADATA;
        case 2: // ARTIFACT
          return ARTIFACT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.services.deploy.thrift.DeploymentMetadata.class)));
    tmpMap.put(_Fields.ARTIFACT, new org.apache.thrift.meta_data.FieldMetaData("artifact", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeploymentArtifact.class, metaDataMap);
  }

  public DeploymentArtifact() {
  }

  public DeploymentArtifact(
    ezbake.services.deploy.thrift.DeploymentMetadata metadata,
    ByteBuffer artifact)
  {
    this();
    this.metadata = metadata;
    this.artifact = artifact;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeploymentArtifact(DeploymentArtifact other) {
    if (other.isSetMetadata()) {
      this.metadata = new ezbake.services.deploy.thrift.DeploymentMetadata(other.metadata);
    }
    if (other.isSetArtifact()) {
      this.artifact = org.apache.thrift.TBaseHelper.copyBinary(other.artifact);
;
    }
  }

  public DeploymentArtifact deepCopy() {
    return new DeploymentArtifact(this);
  }

  @Override
  public void clear() {
    this.metadata = null;
    this.artifact = null;
  }

  public ezbake.services.deploy.thrift.DeploymentMetadata getMetadata() {
    return this.metadata;
  }

  public DeploymentArtifact setMetadata(ezbake.services.deploy.thrift.DeploymentMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public byte[] getArtifact() {
    setArtifact(org.apache.thrift.TBaseHelper.rightSize(artifact));
    return artifact == null ? null : artifact.array();
  }

  public ByteBuffer bufferForArtifact() {
    return artifact;
  }

  public DeploymentArtifact setArtifact(byte[] artifact) {
    setArtifact(artifact == null ? (ByteBuffer)null : ByteBuffer.wrap(artifact));
    return this;
  }

  public DeploymentArtifact setArtifact(ByteBuffer artifact) {
    this.artifact = artifact;
    return this;
  }

  public void unsetArtifact() {
    this.artifact = null;
  }

  /** Returns true if field artifact is set (has been assigned a value) and false otherwise */
  public boolean isSetArtifact() {
    return this.artifact != null;
  }

  public void setArtifactIsSet(boolean value) {
    if (!value) {
      this.artifact = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((ezbake.services.deploy.thrift.DeploymentMetadata)value);
      }
      break;

    case ARTIFACT:
      if (value == null) {
        unsetArtifact();
      } else {
        setArtifact((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case METADATA:
      return getMetadata();

    case ARTIFACT:
      return getArtifact();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case METADATA:
      return isSetMetadata();
    case ARTIFACT:
      return isSetArtifact();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeploymentArtifact)
      return this.equals((DeploymentArtifact)that);
    return false;
  }

  public boolean equals(DeploymentArtifact that) {
    if (that == null)
      return false;

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_artifact = true && this.isSetArtifact();
    boolean that_present_artifact = true && that.isSetArtifact();
    if (this_present_artifact || that_present_artifact) {
      if (!(this_present_artifact && that_present_artifact))
        return false;
      if (!this.artifact.equals(that.artifact))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DeploymentArtifact other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArtifact()).compareTo(other.isSetArtifact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArtifact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artifact, other.artifact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeploymentArtifact(");
    boolean first = true;

    sb.append("metadata:");
    if (this.metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("artifact:");
    if (this.artifact == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.artifact, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (metadata == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata' was not present! Struct: " + toString());
    }
    if (artifact == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'artifact' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (metadata != null) {
      metadata.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeploymentArtifactStandardSchemeFactory implements SchemeFactory {
    public DeploymentArtifactStandardScheme getScheme() {
      return new DeploymentArtifactStandardScheme();
    }
  }

  private static class DeploymentArtifactStandardScheme extends StandardScheme<DeploymentArtifact> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeploymentArtifact struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metadata = new ezbake.services.deploy.thrift.DeploymentMetadata();
              struct.metadata.read(iprot);
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARTIFACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.artifact = iprot.readBinary();
              struct.setArtifactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeploymentArtifact struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metadata != null) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        struct.metadata.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.artifact != null) {
        oprot.writeFieldBegin(ARTIFACT_FIELD_DESC);
        oprot.writeBinary(struct.artifact);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeploymentArtifactTupleSchemeFactory implements SchemeFactory {
    public DeploymentArtifactTupleScheme getScheme() {
      return new DeploymentArtifactTupleScheme();
    }
  }

  private static class DeploymentArtifactTupleScheme extends TupleScheme<DeploymentArtifact> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeploymentArtifact struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.metadata.write(oprot);
      oprot.writeBinary(struct.artifact);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeploymentArtifact struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.metadata = new ezbake.services.deploy.thrift.DeploymentMetadata();
      struct.metadata.read(iprot);
      struct.setMetadataIsSet(true);
      struct.artifact = iprot.readBinary();
      struct.setArtifactIsSet(true);
    }
  }

}

