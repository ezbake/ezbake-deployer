/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.deploy.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ArtifactManifest implements org.apache.thrift.TBase<ArtifactManifest, ArtifactManifest._Fields>, java.io.Serializable, Cloneable, Comparable<ArtifactManifest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ArtifactManifest");

  private static final org.apache.thrift.protocol.TField APPLICATION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ARTIFACT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("artifactInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ARTIFACT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("artifactType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SCALING_FIELD_DESC = new org.apache.thrift.protocol.TField("scaling", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField WEB_APP_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("webAppInfo", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField THRIFT_SERVICE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("thriftServiceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField FRACK_SERVICE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("frackServiceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField CUSTOM_SERVICE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("customServiceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField DATABASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("databaseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField BATCH_JOB_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("batchJobInfo", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ArtifactManifestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ArtifactManifestTupleSchemeFactory());
  }

  public ApplicationInfo applicationInfo; // optional
  public ArtifactInfo artifactInfo; // optional
  /**
   * 
   * @see ArtifactType
   */
  public ArtifactType artifactType; // optional
  public Scaling scaling; // optional
  public String user; // optional
  public WebAppInfo webAppInfo; // optional
  public ThriftServiceInfo thriftServiceInfo; // optional
  public FrackServiceInfo frackServiceInfo; // optional
  public CustomServiceInfo customServiceInfo; // optional
  public DatabaseInfo databaseInfo; // optional
  public BatchJobInfo batchJobInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION_INFO((short)1, "applicationInfo"),
    ARTIFACT_INFO((short)2, "artifactInfo"),
    /**
     * 
     * @see ArtifactType
     */
    ARTIFACT_TYPE((short)3, "artifactType"),
    SCALING((short)4, "scaling"),
    USER((short)5, "user"),
    WEB_APP_INFO((short)6, "webAppInfo"),
    THRIFT_SERVICE_INFO((short)7, "thriftServiceInfo"),
    FRACK_SERVICE_INFO((short)8, "frackServiceInfo"),
    CUSTOM_SERVICE_INFO((short)9, "customServiceInfo"),
    DATABASE_INFO((short)10, "databaseInfo"),
    BATCH_JOB_INFO((short)11, "batchJobInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION_INFO
          return APPLICATION_INFO;
        case 2: // ARTIFACT_INFO
          return ARTIFACT_INFO;
        case 3: // ARTIFACT_TYPE
          return ARTIFACT_TYPE;
        case 4: // SCALING
          return SCALING;
        case 5: // USER
          return USER;
        case 6: // WEB_APP_INFO
          return WEB_APP_INFO;
        case 7: // THRIFT_SERVICE_INFO
          return THRIFT_SERVICE_INFO;
        case 8: // FRACK_SERVICE_INFO
          return FRACK_SERVICE_INFO;
        case 9: // CUSTOM_SERVICE_INFO
          return CUSTOM_SERVICE_INFO;
        case 10: // DATABASE_INFO
          return DATABASE_INFO;
        case 11: // BATCH_JOB_INFO
          return BATCH_JOB_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.APPLICATION_INFO,_Fields.ARTIFACT_INFO,_Fields.ARTIFACT_TYPE,_Fields.SCALING,_Fields.USER,_Fields.WEB_APP_INFO,_Fields.THRIFT_SERVICE_INFO,_Fields.FRACK_SERVICE_INFO,_Fields.CUSTOM_SERVICE_INFO,_Fields.DATABASE_INFO,_Fields.BATCH_JOB_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION_INFO, new org.apache.thrift.meta_data.FieldMetaData("applicationInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplicationInfo.class)));
    tmpMap.put(_Fields.ARTIFACT_INFO, new org.apache.thrift.meta_data.FieldMetaData("artifactInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ArtifactInfo.class)));
    tmpMap.put(_Fields.ARTIFACT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("artifactType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ArtifactType.class)));
    tmpMap.put(_Fields.SCALING, new org.apache.thrift.meta_data.FieldMetaData("scaling", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Scaling.class)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEB_APP_INFO, new org.apache.thrift.meta_data.FieldMetaData("webAppInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebAppInfo.class)));
    tmpMap.put(_Fields.THRIFT_SERVICE_INFO, new org.apache.thrift.meta_data.FieldMetaData("thriftServiceInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftServiceInfo.class)));
    tmpMap.put(_Fields.FRACK_SERVICE_INFO, new org.apache.thrift.meta_data.FieldMetaData("frackServiceInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FrackServiceInfo.class)));
    tmpMap.put(_Fields.CUSTOM_SERVICE_INFO, new org.apache.thrift.meta_data.FieldMetaData("customServiceInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CustomServiceInfo.class)));
    tmpMap.put(_Fields.DATABASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("databaseInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DatabaseInfo.class)));
    tmpMap.put(_Fields.BATCH_JOB_INFO, new org.apache.thrift.meta_data.FieldMetaData("batchJobInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BatchJobInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArtifactManifest.class, metaDataMap);
  }

  public ArtifactManifest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ArtifactManifest(ArtifactManifest other) {
    if (other.isSetApplicationInfo()) {
      this.applicationInfo = new ApplicationInfo(other.applicationInfo);
    }
    if (other.isSetArtifactInfo()) {
      this.artifactInfo = new ArtifactInfo(other.artifactInfo);
    }
    if (other.isSetArtifactType()) {
      this.artifactType = other.artifactType;
    }
    if (other.isSetScaling()) {
      this.scaling = new Scaling(other.scaling);
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetWebAppInfo()) {
      this.webAppInfo = new WebAppInfo(other.webAppInfo);
    }
    if (other.isSetThriftServiceInfo()) {
      this.thriftServiceInfo = new ThriftServiceInfo(other.thriftServiceInfo);
    }
    if (other.isSetFrackServiceInfo()) {
      this.frackServiceInfo = new FrackServiceInfo(other.frackServiceInfo);
    }
    if (other.isSetCustomServiceInfo()) {
      this.customServiceInfo = new CustomServiceInfo(other.customServiceInfo);
    }
    if (other.isSetDatabaseInfo()) {
      this.databaseInfo = new DatabaseInfo(other.databaseInfo);
    }
    if (other.isSetBatchJobInfo()) {
      this.batchJobInfo = new BatchJobInfo(other.batchJobInfo);
    }
  }

  public ArtifactManifest deepCopy() {
    return new ArtifactManifest(this);
  }

  @Override
  public void clear() {
    this.applicationInfo = null;
    this.artifactInfo = null;
    this.artifactType = null;
    this.scaling = null;
    this.user = null;
    this.webAppInfo = null;
    this.thriftServiceInfo = null;
    this.frackServiceInfo = null;
    this.customServiceInfo = null;
    this.databaseInfo = null;
    this.batchJobInfo = null;
  }

  public ApplicationInfo getApplicationInfo() {
    return this.applicationInfo;
  }

  public ArtifactManifest setApplicationInfo(ApplicationInfo applicationInfo) {
    this.applicationInfo = applicationInfo;
    return this;
  }

  public void unsetApplicationInfo() {
    this.applicationInfo = null;
  }

  /** Returns true if field applicationInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationInfo() {
    return this.applicationInfo != null;
  }

  public void setApplicationInfoIsSet(boolean value) {
    if (!value) {
      this.applicationInfo = null;
    }
  }

  public ArtifactInfo getArtifactInfo() {
    return this.artifactInfo;
  }

  public ArtifactManifest setArtifactInfo(ArtifactInfo artifactInfo) {
    this.artifactInfo = artifactInfo;
    return this;
  }

  public void unsetArtifactInfo() {
    this.artifactInfo = null;
  }

  /** Returns true if field artifactInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetArtifactInfo() {
    return this.artifactInfo != null;
  }

  public void setArtifactInfoIsSet(boolean value) {
    if (!value) {
      this.artifactInfo = null;
    }
  }

  /**
   * 
   * @see ArtifactType
   */
  public ArtifactType getArtifactType() {
    return this.artifactType;
  }

  /**
   * 
   * @see ArtifactType
   */
  public ArtifactManifest setArtifactType(ArtifactType artifactType) {
    this.artifactType = artifactType;
    return this;
  }

  public void unsetArtifactType() {
    this.artifactType = null;
  }

  /** Returns true if field artifactType is set (has been assigned a value) and false otherwise */
  public boolean isSetArtifactType() {
    return this.artifactType != null;
  }

  public void setArtifactTypeIsSet(boolean value) {
    if (!value) {
      this.artifactType = null;
    }
  }

  public Scaling getScaling() {
    return this.scaling;
  }

  public ArtifactManifest setScaling(Scaling scaling) {
    this.scaling = scaling;
    return this;
  }

  public void unsetScaling() {
    this.scaling = null;
  }

  /** Returns true if field scaling is set (has been assigned a value) and false otherwise */
  public boolean isSetScaling() {
    return this.scaling != null;
  }

  public void setScalingIsSet(boolean value) {
    if (!value) {
      this.scaling = null;
    }
  }

  public String getUser() {
    return this.user;
  }

  public ArtifactManifest setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public WebAppInfo getWebAppInfo() {
    return this.webAppInfo;
  }

  public ArtifactManifest setWebAppInfo(WebAppInfo webAppInfo) {
    this.webAppInfo = webAppInfo;
    return this;
  }

  public void unsetWebAppInfo() {
    this.webAppInfo = null;
  }

  /** Returns true if field webAppInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetWebAppInfo() {
    return this.webAppInfo != null;
  }

  public void setWebAppInfoIsSet(boolean value) {
    if (!value) {
      this.webAppInfo = null;
    }
  }

  public ThriftServiceInfo getThriftServiceInfo() {
    return this.thriftServiceInfo;
  }

  public ArtifactManifest setThriftServiceInfo(ThriftServiceInfo thriftServiceInfo) {
    this.thriftServiceInfo = thriftServiceInfo;
    return this;
  }

  public void unsetThriftServiceInfo() {
    this.thriftServiceInfo = null;
  }

  /** Returns true if field thriftServiceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetThriftServiceInfo() {
    return this.thriftServiceInfo != null;
  }

  public void setThriftServiceInfoIsSet(boolean value) {
    if (!value) {
      this.thriftServiceInfo = null;
    }
  }

  public FrackServiceInfo getFrackServiceInfo() {
    return this.frackServiceInfo;
  }

  public ArtifactManifest setFrackServiceInfo(FrackServiceInfo frackServiceInfo) {
    this.frackServiceInfo = frackServiceInfo;
    return this;
  }

  public void unsetFrackServiceInfo() {
    this.frackServiceInfo = null;
  }

  /** Returns true if field frackServiceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetFrackServiceInfo() {
    return this.frackServiceInfo != null;
  }

  public void setFrackServiceInfoIsSet(boolean value) {
    if (!value) {
      this.frackServiceInfo = null;
    }
  }

  public CustomServiceInfo getCustomServiceInfo() {
    return this.customServiceInfo;
  }

  public ArtifactManifest setCustomServiceInfo(CustomServiceInfo customServiceInfo) {
    this.customServiceInfo = customServiceInfo;
    return this;
  }

  public void unsetCustomServiceInfo() {
    this.customServiceInfo = null;
  }

  /** Returns true if field customServiceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomServiceInfo() {
    return this.customServiceInfo != null;
  }

  public void setCustomServiceInfoIsSet(boolean value) {
    if (!value) {
      this.customServiceInfo = null;
    }
  }

  public DatabaseInfo getDatabaseInfo() {
    return this.databaseInfo;
  }

  public ArtifactManifest setDatabaseInfo(DatabaseInfo databaseInfo) {
    this.databaseInfo = databaseInfo;
    return this;
  }

  public void unsetDatabaseInfo() {
    this.databaseInfo = null;
  }

  /** Returns true if field databaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabaseInfo() {
    return this.databaseInfo != null;
  }

  public void setDatabaseInfoIsSet(boolean value) {
    if (!value) {
      this.databaseInfo = null;
    }
  }

  public BatchJobInfo getBatchJobInfo() {
    return this.batchJobInfo;
  }

  public ArtifactManifest setBatchJobInfo(BatchJobInfo batchJobInfo) {
    this.batchJobInfo = batchJobInfo;
    return this;
  }

  public void unsetBatchJobInfo() {
    this.batchJobInfo = null;
  }

  /** Returns true if field batchJobInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchJobInfo() {
    return this.batchJobInfo != null;
  }

  public void setBatchJobInfoIsSet(boolean value) {
    if (!value) {
      this.batchJobInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLICATION_INFO:
      if (value == null) {
        unsetApplicationInfo();
      } else {
        setApplicationInfo((ApplicationInfo)value);
      }
      break;

    case ARTIFACT_INFO:
      if (value == null) {
        unsetArtifactInfo();
      } else {
        setArtifactInfo((ArtifactInfo)value);
      }
      break;

    case ARTIFACT_TYPE:
      if (value == null) {
        unsetArtifactType();
      } else {
        setArtifactType((ArtifactType)value);
      }
      break;

    case SCALING:
      if (value == null) {
        unsetScaling();
      } else {
        setScaling((Scaling)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case WEB_APP_INFO:
      if (value == null) {
        unsetWebAppInfo();
      } else {
        setWebAppInfo((WebAppInfo)value);
      }
      break;

    case THRIFT_SERVICE_INFO:
      if (value == null) {
        unsetThriftServiceInfo();
      } else {
        setThriftServiceInfo((ThriftServiceInfo)value);
      }
      break;

    case FRACK_SERVICE_INFO:
      if (value == null) {
        unsetFrackServiceInfo();
      } else {
        setFrackServiceInfo((FrackServiceInfo)value);
      }
      break;

    case CUSTOM_SERVICE_INFO:
      if (value == null) {
        unsetCustomServiceInfo();
      } else {
        setCustomServiceInfo((CustomServiceInfo)value);
      }
      break;

    case DATABASE_INFO:
      if (value == null) {
        unsetDatabaseInfo();
      } else {
        setDatabaseInfo((DatabaseInfo)value);
      }
      break;

    case BATCH_JOB_INFO:
      if (value == null) {
        unsetBatchJobInfo();
      } else {
        setBatchJobInfo((BatchJobInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION_INFO:
      return getApplicationInfo();

    case ARTIFACT_INFO:
      return getArtifactInfo();

    case ARTIFACT_TYPE:
      return getArtifactType();

    case SCALING:
      return getScaling();

    case USER:
      return getUser();

    case WEB_APP_INFO:
      return getWebAppInfo();

    case THRIFT_SERVICE_INFO:
      return getThriftServiceInfo();

    case FRACK_SERVICE_INFO:
      return getFrackServiceInfo();

    case CUSTOM_SERVICE_INFO:
      return getCustomServiceInfo();

    case DATABASE_INFO:
      return getDatabaseInfo();

    case BATCH_JOB_INFO:
      return getBatchJobInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION_INFO:
      return isSetApplicationInfo();
    case ARTIFACT_INFO:
      return isSetArtifactInfo();
    case ARTIFACT_TYPE:
      return isSetArtifactType();
    case SCALING:
      return isSetScaling();
    case USER:
      return isSetUser();
    case WEB_APP_INFO:
      return isSetWebAppInfo();
    case THRIFT_SERVICE_INFO:
      return isSetThriftServiceInfo();
    case FRACK_SERVICE_INFO:
      return isSetFrackServiceInfo();
    case CUSTOM_SERVICE_INFO:
      return isSetCustomServiceInfo();
    case DATABASE_INFO:
      return isSetDatabaseInfo();
    case BATCH_JOB_INFO:
      return isSetBatchJobInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ArtifactManifest)
      return this.equals((ArtifactManifest)that);
    return false;
  }

  public boolean equals(ArtifactManifest that) {
    if (that == null)
      return false;

    boolean this_present_applicationInfo = true && this.isSetApplicationInfo();
    boolean that_present_applicationInfo = true && that.isSetApplicationInfo();
    if (this_present_applicationInfo || that_present_applicationInfo) {
      if (!(this_present_applicationInfo && that_present_applicationInfo))
        return false;
      if (!this.applicationInfo.equals(that.applicationInfo))
        return false;
    }

    boolean this_present_artifactInfo = true && this.isSetArtifactInfo();
    boolean that_present_artifactInfo = true && that.isSetArtifactInfo();
    if (this_present_artifactInfo || that_present_artifactInfo) {
      if (!(this_present_artifactInfo && that_present_artifactInfo))
        return false;
      if (!this.artifactInfo.equals(that.artifactInfo))
        return false;
    }

    boolean this_present_artifactType = true && this.isSetArtifactType();
    boolean that_present_artifactType = true && that.isSetArtifactType();
    if (this_present_artifactType || that_present_artifactType) {
      if (!(this_present_artifactType && that_present_artifactType))
        return false;
      if (!this.artifactType.equals(that.artifactType))
        return false;
    }

    boolean this_present_scaling = true && this.isSetScaling();
    boolean that_present_scaling = true && that.isSetScaling();
    if (this_present_scaling || that_present_scaling) {
      if (!(this_present_scaling && that_present_scaling))
        return false;
      if (!this.scaling.equals(that.scaling))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_webAppInfo = true && this.isSetWebAppInfo();
    boolean that_present_webAppInfo = true && that.isSetWebAppInfo();
    if (this_present_webAppInfo || that_present_webAppInfo) {
      if (!(this_present_webAppInfo && that_present_webAppInfo))
        return false;
      if (!this.webAppInfo.equals(that.webAppInfo))
        return false;
    }

    boolean this_present_thriftServiceInfo = true && this.isSetThriftServiceInfo();
    boolean that_present_thriftServiceInfo = true && that.isSetThriftServiceInfo();
    if (this_present_thriftServiceInfo || that_present_thriftServiceInfo) {
      if (!(this_present_thriftServiceInfo && that_present_thriftServiceInfo))
        return false;
      if (!this.thriftServiceInfo.equals(that.thriftServiceInfo))
        return false;
    }

    boolean this_present_frackServiceInfo = true && this.isSetFrackServiceInfo();
    boolean that_present_frackServiceInfo = true && that.isSetFrackServiceInfo();
    if (this_present_frackServiceInfo || that_present_frackServiceInfo) {
      if (!(this_present_frackServiceInfo && that_present_frackServiceInfo))
        return false;
      if (!this.frackServiceInfo.equals(that.frackServiceInfo))
        return false;
    }

    boolean this_present_customServiceInfo = true && this.isSetCustomServiceInfo();
    boolean that_present_customServiceInfo = true && that.isSetCustomServiceInfo();
    if (this_present_customServiceInfo || that_present_customServiceInfo) {
      if (!(this_present_customServiceInfo && that_present_customServiceInfo))
        return false;
      if (!this.customServiceInfo.equals(that.customServiceInfo))
        return false;
    }

    boolean this_present_databaseInfo = true && this.isSetDatabaseInfo();
    boolean that_present_databaseInfo = true && that.isSetDatabaseInfo();
    if (this_present_databaseInfo || that_present_databaseInfo) {
      if (!(this_present_databaseInfo && that_present_databaseInfo))
        return false;
      if (!this.databaseInfo.equals(that.databaseInfo))
        return false;
    }

    boolean this_present_batchJobInfo = true && this.isSetBatchJobInfo();
    boolean that_present_batchJobInfo = true && that.isSetBatchJobInfo();
    if (this_present_batchJobInfo || that_present_batchJobInfo) {
      if (!(this_present_batchJobInfo && that_present_batchJobInfo))
        return false;
      if (!this.batchJobInfo.equals(that.batchJobInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ArtifactManifest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApplicationInfo()).compareTo(other.isSetApplicationInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationInfo, other.applicationInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArtifactInfo()).compareTo(other.isSetArtifactInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArtifactInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artifactInfo, other.artifactInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArtifactType()).compareTo(other.isSetArtifactType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArtifactType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artifactType, other.artifactType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScaling()).compareTo(other.isSetScaling());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScaling()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scaling, other.scaling);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebAppInfo()).compareTo(other.isSetWebAppInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebAppInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webAppInfo, other.webAppInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThriftServiceInfo()).compareTo(other.isSetThriftServiceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThriftServiceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thriftServiceInfo, other.thriftServiceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrackServiceInfo()).compareTo(other.isSetFrackServiceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrackServiceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frackServiceInfo, other.frackServiceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomServiceInfo()).compareTo(other.isSetCustomServiceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomServiceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customServiceInfo, other.customServiceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatabaseInfo()).compareTo(other.isSetDatabaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databaseInfo, other.databaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchJobInfo()).compareTo(other.isSetBatchJobInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchJobInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchJobInfo, other.batchJobInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ArtifactManifest(");
    boolean first = true;

    if (isSetApplicationInfo()) {
      sb.append("applicationInfo:");
      if (this.applicationInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationInfo);
      }
      first = false;
    }
    if (isSetArtifactInfo()) {
      if (!first) sb.append(", ");
      sb.append("artifactInfo:");
      if (this.artifactInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.artifactInfo);
      }
      first = false;
    }
    if (isSetArtifactType()) {
      if (!first) sb.append(", ");
      sb.append("artifactType:");
      if (this.artifactType == null) {
        sb.append("null");
      } else {
        sb.append(this.artifactType);
      }
      first = false;
    }
    if (isSetScaling()) {
      if (!first) sb.append(", ");
      sb.append("scaling:");
      if (this.scaling == null) {
        sb.append("null");
      } else {
        sb.append(this.scaling);
      }
      first = false;
    }
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetWebAppInfo()) {
      if (!first) sb.append(", ");
      sb.append("webAppInfo:");
      if (this.webAppInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.webAppInfo);
      }
      first = false;
    }
    if (isSetThriftServiceInfo()) {
      if (!first) sb.append(", ");
      sb.append("thriftServiceInfo:");
      if (this.thriftServiceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.thriftServiceInfo);
      }
      first = false;
    }
    if (isSetFrackServiceInfo()) {
      if (!first) sb.append(", ");
      sb.append("frackServiceInfo:");
      if (this.frackServiceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.frackServiceInfo);
      }
      first = false;
    }
    if (isSetCustomServiceInfo()) {
      if (!first) sb.append(", ");
      sb.append("customServiceInfo:");
      if (this.customServiceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.customServiceInfo);
      }
      first = false;
    }
    if (isSetDatabaseInfo()) {
      if (!first) sb.append(", ");
      sb.append("databaseInfo:");
      if (this.databaseInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.databaseInfo);
      }
      first = false;
    }
    if (isSetBatchJobInfo()) {
      if (!first) sb.append(", ");
      sb.append("batchJobInfo:");
      if (this.batchJobInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.batchJobInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (applicationInfo != null) {
      applicationInfo.validate();
    }
    if (artifactInfo != null) {
      artifactInfo.validate();
    }
    if (scaling != null) {
      scaling.validate();
    }
    if (webAppInfo != null) {
      webAppInfo.validate();
    }
    if (thriftServiceInfo != null) {
      thriftServiceInfo.validate();
    }
    if (frackServiceInfo != null) {
      frackServiceInfo.validate();
    }
    if (customServiceInfo != null) {
      customServiceInfo.validate();
    }
    if (databaseInfo != null) {
      databaseInfo.validate();
    }
    if (batchJobInfo != null) {
      batchJobInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ArtifactManifestStandardSchemeFactory implements SchemeFactory {
    public ArtifactManifestStandardScheme getScheme() {
      return new ArtifactManifestStandardScheme();
    }
  }

  private static class ArtifactManifestStandardScheme extends StandardScheme<ArtifactManifest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ArtifactManifest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.applicationInfo = new ApplicationInfo();
              struct.applicationInfo.read(iprot);
              struct.setApplicationInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARTIFACT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.artifactInfo = new ArtifactInfo();
              struct.artifactInfo.read(iprot);
              struct.setArtifactInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARTIFACT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.artifactType = ArtifactType.findByValue(iprot.readI32());
              struct.setArtifactTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCALING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.scaling = new Scaling();
              struct.scaling.read(iprot);
              struct.setScalingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WEB_APP_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.webAppInfo = new WebAppInfo();
              struct.webAppInfo.read(iprot);
              struct.setWebAppInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // THRIFT_SERVICE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.thriftServiceInfo = new ThriftServiceInfo();
              struct.thriftServiceInfo.read(iprot);
              struct.setThriftServiceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FRACK_SERVICE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.frackServiceInfo = new FrackServiceInfo();
              struct.frackServiceInfo.read(iprot);
              struct.setFrackServiceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CUSTOM_SERVICE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.customServiceInfo = new CustomServiceInfo();
              struct.customServiceInfo.read(iprot);
              struct.setCustomServiceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATABASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.databaseInfo = new DatabaseInfo();
              struct.databaseInfo.read(iprot);
              struct.setDatabaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BATCH_JOB_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.batchJobInfo = new BatchJobInfo();
              struct.batchJobInfo.read(iprot);
              struct.setBatchJobInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ArtifactManifest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applicationInfo != null) {
        if (struct.isSetApplicationInfo()) {
          oprot.writeFieldBegin(APPLICATION_INFO_FIELD_DESC);
          struct.applicationInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.artifactInfo != null) {
        if (struct.isSetArtifactInfo()) {
          oprot.writeFieldBegin(ARTIFACT_INFO_FIELD_DESC);
          struct.artifactInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.artifactType != null) {
        if (struct.isSetArtifactType()) {
          oprot.writeFieldBegin(ARTIFACT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.artifactType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.scaling != null) {
        if (struct.isSetScaling()) {
          oprot.writeFieldBegin(SCALING_FIELD_DESC);
          struct.scaling.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.webAppInfo != null) {
        if (struct.isSetWebAppInfo()) {
          oprot.writeFieldBegin(WEB_APP_INFO_FIELD_DESC);
          struct.webAppInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.thriftServiceInfo != null) {
        if (struct.isSetThriftServiceInfo()) {
          oprot.writeFieldBegin(THRIFT_SERVICE_INFO_FIELD_DESC);
          struct.thriftServiceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.frackServiceInfo != null) {
        if (struct.isSetFrackServiceInfo()) {
          oprot.writeFieldBegin(FRACK_SERVICE_INFO_FIELD_DESC);
          struct.frackServiceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.customServiceInfo != null) {
        if (struct.isSetCustomServiceInfo()) {
          oprot.writeFieldBegin(CUSTOM_SERVICE_INFO_FIELD_DESC);
          struct.customServiceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.databaseInfo != null) {
        if (struct.isSetDatabaseInfo()) {
          oprot.writeFieldBegin(DATABASE_INFO_FIELD_DESC);
          struct.databaseInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.batchJobInfo != null) {
        if (struct.isSetBatchJobInfo()) {
          oprot.writeFieldBegin(BATCH_JOB_INFO_FIELD_DESC);
          struct.batchJobInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ArtifactManifestTupleSchemeFactory implements SchemeFactory {
    public ArtifactManifestTupleScheme getScheme() {
      return new ArtifactManifestTupleScheme();
    }
  }

  private static class ArtifactManifestTupleScheme extends TupleScheme<ArtifactManifest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ArtifactManifest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetApplicationInfo()) {
        optionals.set(0);
      }
      if (struct.isSetArtifactInfo()) {
        optionals.set(1);
      }
      if (struct.isSetArtifactType()) {
        optionals.set(2);
      }
      if (struct.isSetScaling()) {
        optionals.set(3);
      }
      if (struct.isSetUser()) {
        optionals.set(4);
      }
      if (struct.isSetWebAppInfo()) {
        optionals.set(5);
      }
      if (struct.isSetThriftServiceInfo()) {
        optionals.set(6);
      }
      if (struct.isSetFrackServiceInfo()) {
        optionals.set(7);
      }
      if (struct.isSetCustomServiceInfo()) {
        optionals.set(8);
      }
      if (struct.isSetDatabaseInfo()) {
        optionals.set(9);
      }
      if (struct.isSetBatchJobInfo()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetApplicationInfo()) {
        struct.applicationInfo.write(oprot);
      }
      if (struct.isSetArtifactInfo()) {
        struct.artifactInfo.write(oprot);
      }
      if (struct.isSetArtifactType()) {
        oprot.writeI32(struct.artifactType.getValue());
      }
      if (struct.isSetScaling()) {
        struct.scaling.write(oprot);
      }
      if (struct.isSetUser()) {
        oprot.writeString(struct.user);
      }
      if (struct.isSetWebAppInfo()) {
        struct.webAppInfo.write(oprot);
      }
      if (struct.isSetThriftServiceInfo()) {
        struct.thriftServiceInfo.write(oprot);
      }
      if (struct.isSetFrackServiceInfo()) {
        struct.frackServiceInfo.write(oprot);
      }
      if (struct.isSetCustomServiceInfo()) {
        struct.customServiceInfo.write(oprot);
      }
      if (struct.isSetDatabaseInfo()) {
        struct.databaseInfo.write(oprot);
      }
      if (struct.isSetBatchJobInfo()) {
        struct.batchJobInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ArtifactManifest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.applicationInfo = new ApplicationInfo();
        struct.applicationInfo.read(iprot);
        struct.setApplicationInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.artifactInfo = new ArtifactInfo();
        struct.artifactInfo.read(iprot);
        struct.setArtifactInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.artifactType = ArtifactType.findByValue(iprot.readI32());
        struct.setArtifactTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.scaling = new Scaling();
        struct.scaling.read(iprot);
        struct.setScalingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.user = iprot.readString();
        struct.setUserIsSet(true);
      }
      if (incoming.get(5)) {
        struct.webAppInfo = new WebAppInfo();
        struct.webAppInfo.read(iprot);
        struct.setWebAppInfoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.thriftServiceInfo = new ThriftServiceInfo();
        struct.thriftServiceInfo.read(iprot);
        struct.setThriftServiceInfoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.frackServiceInfo = new FrackServiceInfo();
        struct.frackServiceInfo.read(iprot);
        struct.setFrackServiceInfoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.customServiceInfo = new CustomServiceInfo();
        struct.customServiceInfo.read(iprot);
        struct.setCustomServiceInfoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.databaseInfo = new DatabaseInfo();
        struct.databaseInfo.read(iprot);
        struct.setDatabaseInfoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.batchJobInfo = new BatchJobInfo();
        struct.batchJobInfo.read(iprot);
        struct.setBatchJobInfoIsSet(true);
      }
    }
  }

}

